{"version":3,"file":"92.bundle.js","mappings":"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","sources":["webpack://gesture-3d-learning-platform/./node_modules/three/examples/jsm/utils/BufferGeometryUtils.js","webpack://gesture-3d-learning-platform/./node_modules/three/examples/jsm/loaders/GLTFLoader.js"],"sourcesContent":["import {\n\tBufferAttribute,\n\tBufferGeometry,\n\tFloat32BufferAttribute,\n\tInstancedBufferAttribute,\n\tInterleavedBuffer,\n\tInterleavedBufferAttribute,\n\tTriangleFanDrawMode,\n\tTriangleStripDrawMode,\n\tTrianglesDrawMode,\n\tVector3,\n} from 'three';\n\n/**\n * @module BufferGeometryUtils\n * @three_import import * as BufferGeometryUtils from 'three/addons/utils/BufferGeometryUtils.js';\n */\n\n/**\n * Computes vertex tangents using the MikkTSpace algorithm. MikkTSpace generates the same tangents consistently,\n * and is used in most modelling tools and normal map bakers. Use MikkTSpace for materials with normal maps,\n * because inconsistent tangents may lead to subtle visual issues in the normal map, particularly around mirrored\n * UV seams.\n *\n * In comparison to this method, {@link BufferGeometry#computeTangents} (a custom algorithm) generates tangents that\n * probably will not match the tangents in other software. The custom algorithm is sufficient for general use with a\n * custom material, and may be faster than MikkTSpace.\n *\n * Returns the original BufferGeometry. Indexed geometries will be de-indexed. Requires position, normal, and uv attributes.\n *\n * @param {BufferGeometry} geometry - The geometry to compute tangents for.\n * @param {Object} MikkTSpace - Instance of `examples/jsm/libs/mikktspace.module.js`, or `mikktspace` npm package.\n * Await `MikkTSpace.ready` before use.\n * @param {boolean} [negateSign=true] - Whether to negate the sign component (.w) of each tangent.\n * Required for normal map conventions in some formats, including glTF.\n * @return {BufferGeometry} The updated geometry.\n */\nfunction computeMikkTSpaceTangents( geometry, MikkTSpace, negateSign = true ) {\n\n\tif ( ! MikkTSpace || ! MikkTSpace.isReady ) {\n\n\t\tthrow new Error( 'BufferGeometryUtils: Initialized MikkTSpace library required.' );\n\n\t}\n\n\tif ( ! geometry.hasAttribute( 'position' ) || ! geometry.hasAttribute( 'normal' ) || ! geometry.hasAttribute( 'uv' ) ) {\n\n\t\tthrow new Error( 'BufferGeometryUtils: Tangents require \"position\", \"normal\", and \"uv\" attributes.' );\n\n\t}\n\n\tfunction getAttributeArray( attribute ) {\n\n\t\tif ( attribute.normalized || attribute.isInterleavedBufferAttribute ) {\n\n\t\t\tconst dstArray = new Float32Array( attribute.count * attribute.itemSize );\n\n\t\t\tfor ( let i = 0, j = 0; i < attribute.count; i ++ ) {\n\n\t\t\t\tdstArray[ j ++ ] = attribute.getX( i );\n\t\t\t\tdstArray[ j ++ ] = attribute.getY( i );\n\n\t\t\t\tif ( attribute.itemSize > 2 ) {\n\n\t\t\t\t\tdstArray[ j ++ ] = attribute.getZ( i );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn dstArray;\n\n\t\t}\n\n\t\tif ( attribute.array instanceof Float32Array ) {\n\n\t\t\treturn attribute.array;\n\n\t\t}\n\n\t\treturn new Float32Array( attribute.array );\n\n\t}\n\n\t// MikkTSpace algorithm requires non-indexed input.\n\n\tconst _geometry = geometry.index ? geometry.toNonIndexed() : geometry;\n\n\t// Compute vertex tangents.\n\n\tconst tangents = MikkTSpace.generateTangents(\n\n\t\tgetAttributeArray( _geometry.attributes.position ),\n\t\tgetAttributeArray( _geometry.attributes.normal ),\n\t\tgetAttributeArray( _geometry.attributes.uv )\n\n\t);\n\n\t// Texture coordinate convention of glTF differs from the apparent\n\t// default of the MikkTSpace library; .w component must be flipped.\n\n\tif ( negateSign ) {\n\n\t\tfor ( let i = 3; i < tangents.length; i += 4 ) {\n\n\t\t\ttangents[ i ] *= - 1;\n\n\t\t}\n\n\t}\n\n\t//\n\n\t_geometry.setAttribute( 'tangent', new BufferAttribute( tangents, 4 ) );\n\n\tif ( geometry !== _geometry ) {\n\n\t\tgeometry.copy( _geometry );\n\n\t}\n\n\treturn geometry;\n\n}\n\n/**\n * Merges a set of geometries into a single instance. All geometries must have compatible attributes.\n *\n * @param {Array<BufferGeometry>} geometries - The geometries to merge.\n * @param {boolean} [useGroups=false] - Whether to use groups or not.\n * @return {?BufferGeometry} The merged geometry. Returns `null` if the merge does not succeed.\n */\nfunction mergeGeometries( geometries, useGroups = false ) {\n\n\tconst isIndexed = geometries[ 0 ].index !== null;\n\n\tconst attributesUsed = new Set( Object.keys( geometries[ 0 ].attributes ) );\n\tconst morphAttributesUsed = new Set( Object.keys( geometries[ 0 ].morphAttributes ) );\n\n\tconst attributes = {};\n\tconst morphAttributes = {};\n\n\tconst morphTargetsRelative = geometries[ 0 ].morphTargetsRelative;\n\n\tconst mergedGeometry = new BufferGeometry();\n\n\tlet offset = 0;\n\n\tfor ( let i = 0; i < geometries.length; ++ i ) {\n\n\t\tconst geometry = geometries[ i ];\n\t\tlet attributesCount = 0;\n\n\t\t// ensure that all geometries are indexed, or none\n\n\t\tif ( isIndexed !== ( geometry.index !== null ) ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' + i + '. All geometries must have compatible attributes; make sure index attribute exists among all geometries, or in none of them.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// gather attributes, exit early if they're different\n\n\t\tfor ( const name in geometry.attributes ) {\n\n\t\t\tif ( ! attributesUsed.has( name ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' + i + '. All geometries must have compatible attributes; make sure \"' + name + '\" attribute exists among all geometries, or in none of them.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tif ( attributes[ name ] === undefined ) attributes[ name ] = [];\n\n\t\t\tattributes[ name ].push( geometry.attributes[ name ] );\n\n\t\t\tattributesCount ++;\n\n\t\t}\n\n\t\t// ensure geometries have the same number of attributes\n\n\t\tif ( attributesCount !== attributesUsed.size ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' + i + '. Make sure all geometries have the same number of attributes.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// gather morph attributes, exit early if they're different\n\n\t\tif ( morphTargetsRelative !== geometry.morphTargetsRelative ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' + i + '. .morphTargetsRelative must be consistent throughout all geometries.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tfor ( const name in geometry.morphAttributes ) {\n\n\t\t\tif ( ! morphAttributesUsed.has( name ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' + i + '.  .morphAttributes must be consistent throughout all geometries.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tif ( morphAttributes[ name ] === undefined ) morphAttributes[ name ] = [];\n\n\t\t\tmorphAttributes[ name ].push( geometry.morphAttributes[ name ] );\n\n\t\t}\n\n\t\tif ( useGroups ) {\n\n\t\t\tlet count;\n\n\t\t\tif ( isIndexed ) {\n\n\t\t\t\tcount = geometry.index.count;\n\n\t\t\t} else if ( geometry.attributes.position !== undefined ) {\n\n\t\t\t\tcount = geometry.attributes.position.count;\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' + i + '. The geometry must have either an index or a position attribute' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tmergedGeometry.addGroup( offset, count, i );\n\n\t\t\toffset += count;\n\n\t\t}\n\n\t}\n\n\t// merge indices\n\n\tif ( isIndexed ) {\n\n\t\tlet indexOffset = 0;\n\t\tconst mergedIndex = [];\n\n\t\tfor ( let i = 0; i < geometries.length; ++ i ) {\n\n\t\t\tconst index = geometries[ i ].index;\n\n\t\t\tfor ( let j = 0; j < index.count; ++ j ) {\n\n\t\t\t\tmergedIndex.push( index.getX( j ) + indexOffset );\n\n\t\t\t}\n\n\t\t\tindexOffset += geometries[ i ].attributes.position.count;\n\n\t\t}\n\n\t\tmergedGeometry.setIndex( mergedIndex );\n\n\t}\n\n\t// merge attributes\n\n\tfor ( const name in attributes ) {\n\n\t\tconst mergedAttribute = mergeAttributes( attributes[ name ] );\n\n\t\tif ( ! mergedAttribute ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed while trying to merge the ' + name + ' attribute.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tmergedGeometry.setAttribute( name, mergedAttribute );\n\n\t}\n\n\t// merge morph attributes\n\n\tfor ( const name in morphAttributes ) {\n\n\t\tconst numMorphTargets = morphAttributes[ name ][ 0 ].length;\n\n\t\tif ( numMorphTargets === 0 ) break;\n\n\t\tmergedGeometry.morphAttributes = mergedGeometry.morphAttributes || {};\n\t\tmergedGeometry.morphAttributes[ name ] = [];\n\n\t\tfor ( let i = 0; i < numMorphTargets; ++ i ) {\n\n\t\t\tconst morphAttributesToMerge = [];\n\n\t\t\tfor ( let j = 0; j < morphAttributes[ name ].length; ++ j ) {\n\n\t\t\t\tmorphAttributesToMerge.push( morphAttributes[ name ][ j ][ i ] );\n\n\t\t\t}\n\n\t\t\tconst mergedMorphAttribute = mergeAttributes( morphAttributesToMerge );\n\n\t\t\tif ( ! mergedMorphAttribute ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed while trying to merge the ' + name + ' morphAttribute.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tmergedGeometry.morphAttributes[ name ].push( mergedMorphAttribute );\n\n\t\t}\n\n\t}\n\n\treturn mergedGeometry;\n\n}\n\n/**\n * Merges a set of attributes into a single instance. All attributes must have compatible properties and types.\n * Instances of {@link InterleavedBufferAttribute} are not supported.\n *\n * @param {Array<BufferAttribute>} attributes - The attributes to merge.\n * @return {?BufferAttribute} The merged attribute. Returns `null` if the merge does not succeed.\n */\nfunction mergeAttributes( attributes ) {\n\n\tlet TypedArray;\n\tlet itemSize;\n\tlet normalized;\n\tlet gpuType = - 1;\n\tlet arrayLength = 0;\n\n\tfor ( let i = 0; i < attributes.length; ++ i ) {\n\n\t\tconst attribute = attributes[ i ];\n\n\t\tif ( TypedArray === undefined ) TypedArray = attribute.array.constructor;\n\t\tif ( TypedArray !== attribute.array.constructor ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeAttributes() failed. BufferAttribute.array must be of consistent array types across matching attributes.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tif ( itemSize === undefined ) itemSize = attribute.itemSize;\n\t\tif ( itemSize !== attribute.itemSize ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeAttributes() failed. BufferAttribute.itemSize must be consistent across matching attributes.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tif ( normalized === undefined ) normalized = attribute.normalized;\n\t\tif ( normalized !== attribute.normalized ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeAttributes() failed. BufferAttribute.normalized must be consistent across matching attributes.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tif ( gpuType === - 1 ) gpuType = attribute.gpuType;\n\t\tif ( gpuType !== attribute.gpuType ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeAttributes() failed. BufferAttribute.gpuType must be consistent across matching attributes.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tarrayLength += attribute.count * itemSize;\n\n\t}\n\n\tconst array = new TypedArray( arrayLength );\n\tconst result = new BufferAttribute( array, itemSize, normalized );\n\tlet offset = 0;\n\n\tfor ( let i = 0; i < attributes.length; ++ i ) {\n\n\t\tconst attribute = attributes[ i ];\n\t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n\t\t\tconst tupleOffset = offset / itemSize;\n\t\t\tfor ( let j = 0, l = attribute.count; j < l; j ++ ) {\n\n\t\t\t\tfor ( let c = 0; c < itemSize; c ++ ) {\n\n\t\t\t\t\tconst value = attribute.getComponent( j, c );\n\t\t\t\t\tresult.setComponent( j + tupleOffset, c, value );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tarray.set( attribute.array, offset );\n\n\t\t}\n\n\t\toffset += attribute.count * itemSize;\n\n\t}\n\n\tif ( gpuType !== undefined ) {\n\n\t\tresult.gpuType = gpuType;\n\n\t}\n\n\treturn result;\n\n}\n\n/**\n * Performs a deep clone of the given buffer attribute.\n *\n * @param {BufferAttribute} attribute - The attribute to clone.\n * @return {BufferAttribute} The cloned attribute.\n */\nfunction deepCloneAttribute( attribute ) {\n\n\tif ( attribute.isInstancedInterleavedBufferAttribute || attribute.isInterleavedBufferAttribute ) {\n\n\t\treturn deinterleaveAttribute( attribute );\n\n\t}\n\n\tif ( attribute.isInstancedBufferAttribute ) {\n\n\t\treturn new InstancedBufferAttribute().copy( attribute );\n\n\t}\n\n\treturn new BufferAttribute().copy( attribute );\n\n}\n\n/**\n * Interleaves a set of attributes and returns a new array of corresponding attributes that share a\n * single {@link InterleavedBuffer} instance. All attributes must have compatible types.\n *\n * @param {Array<BufferAttribute>} attributes - The attributes to interleave.\n * @return {Array<InterleavedBufferAttribute>} An array of interleaved attributes. If interleave does not succeed, the method returns `null`.\n */\nfunction interleaveAttributes( attributes ) {\n\n\t// Interleaves the provided attributes into an InterleavedBuffer and returns\n\t// a set of InterleavedBufferAttributes for each attribute\n\tlet TypedArray;\n\tlet arrayLength = 0;\n\tlet stride = 0;\n\n\t// calculate the length and type of the interleavedBuffer\n\tfor ( let i = 0, l = attributes.length; i < l; ++ i ) {\n\n\t\tconst attribute = attributes[ i ];\n\n\t\tif ( TypedArray === undefined ) TypedArray = attribute.array.constructor;\n\t\tif ( TypedArray !== attribute.array.constructor ) {\n\n\t\t\tconsole.error( 'AttributeBuffers of different types cannot be interleaved' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tarrayLength += attribute.array.length;\n\t\tstride += attribute.itemSize;\n\n\t}\n\n\t// Create the set of buffer attributes\n\tconst interleavedBuffer = new InterleavedBuffer( new TypedArray( arrayLength ), stride );\n\tlet offset = 0;\n\tconst res = [];\n\tconst getters = [ 'getX', 'getY', 'getZ', 'getW' ];\n\tconst setters = [ 'setX', 'setY', 'setZ', 'setW' ];\n\n\tfor ( let j = 0, l = attributes.length; j < l; j ++ ) {\n\n\t\tconst attribute = attributes[ j ];\n\t\tconst itemSize = attribute.itemSize;\n\t\tconst count = attribute.count;\n\t\tconst iba = new InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, attribute.normalized );\n\t\tres.push( iba );\n\n\t\toffset += itemSize;\n\n\t\t// Move the data for each attribute into the new interleavedBuffer\n\t\t// at the appropriate offset\n\t\tfor ( let c = 0; c < count; c ++ ) {\n\n\t\t\tfor ( let k = 0; k < itemSize; k ++ ) {\n\n\t\t\t\tiba[ setters[ k ] ]( c, attribute[ getters[ k ] ]( c ) );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn res;\n\n}\n\n/**\n * Returns a new, non-interleaved version of the given attribute.\n *\n * @param {InterleavedBufferAttribute} attribute - The interleaved attribute.\n * @return {BufferAttribute} The non-interleaved attribute.\n */\nfunction deinterleaveAttribute( attribute ) {\n\n\tconst cons = attribute.data.array.constructor;\n\tconst count = attribute.count;\n\tconst itemSize = attribute.itemSize;\n\tconst normalized = attribute.normalized;\n\n\tconst array = new cons( count * itemSize );\n\tlet newAttribute;\n\tif ( attribute.isInstancedInterleavedBufferAttribute ) {\n\n\t\tnewAttribute = new InstancedBufferAttribute( array, itemSize, normalized, attribute.meshPerAttribute );\n\n\t} else {\n\n\t\tnewAttribute = new BufferAttribute( array, itemSize, normalized );\n\n\t}\n\n\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\tnewAttribute.setX( i, attribute.getX( i ) );\n\n\t\tif ( itemSize >= 2 ) {\n\n\t\t\tnewAttribute.setY( i, attribute.getY( i ) );\n\n\t\t}\n\n\t\tif ( itemSize >= 3 ) {\n\n\t\t\tnewAttribute.setZ( i, attribute.getZ( i ) );\n\n\t\t}\n\n\t\tif ( itemSize >= 4 ) {\n\n\t\t\tnewAttribute.setW( i, attribute.getW( i ) );\n\n\t\t}\n\n\t}\n\n\treturn newAttribute;\n\n}\n\n/**\n * Deinterleaves all attributes on the given geometry.\n *\n * @param {BufferGeometry} geometry - The geometry to deinterleave.\n */\nfunction deinterleaveGeometry( geometry ) {\n\n\tconst attributes = geometry.attributes;\n\tconst morphTargets = geometry.morphTargets;\n\tconst attrMap = new Map();\n\n\tfor ( const key in attributes ) {\n\n\t\tconst attr = attributes[ key ];\n\t\tif ( attr.isInterleavedBufferAttribute ) {\n\n\t\t\tif ( ! attrMap.has( attr ) ) {\n\n\t\t\t\tattrMap.set( attr, deinterleaveAttribute( attr ) );\n\n\t\t\t}\n\n\t\t\tattributes[ key ] = attrMap.get( attr );\n\n\t\t}\n\n\t}\n\n\tfor ( const key in morphTargets ) {\n\n\t\tconst attr = morphTargets[ key ];\n\t\tif ( attr.isInterleavedBufferAttribute ) {\n\n\t\t\tif ( ! attrMap.has( attr ) ) {\n\n\t\t\t\tattrMap.set( attr, deinterleaveAttribute( attr ) );\n\n\t\t\t}\n\n\t\t\tmorphTargets[ key ] = attrMap.get( attr );\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * Returns the amount of bytes used by all attributes to represent the geometry.\n *\n * @param {BufferGeometry} geometry - The geometry.\n * @return {number} The estimate bytes used.\n */\nfunction estimateBytesUsed( geometry ) {\n\n\t// Return the estimated memory used by this geometry in bytes\n\t// Calculate using itemSize, count, and BYTES_PER_ELEMENT to account\n\t// for InterleavedBufferAttributes.\n\tlet mem = 0;\n\tfor ( const name in geometry.attributes ) {\n\n\t\tconst attr = geometry.getAttribute( name );\n\t\tmem += attr.count * attr.itemSize * attr.array.BYTES_PER_ELEMENT;\n\n\t}\n\n\tconst indices = geometry.getIndex();\n\tmem += indices ? indices.count * indices.itemSize * indices.array.BYTES_PER_ELEMENT : 0;\n\treturn mem;\n\n}\n\n/**\n * Returns a new geometry with vertices for which all similar vertex attributes (within tolerance) are merged.\n *\n * @param {BufferGeometry} geometry - The geometry to merge vertices for.\n * @param {number} [tolerance=1e-4] - The tolerance value.\n * @return {BufferGeometry} - The new geometry with merged vertices.\n */\nfunction mergeVertices( geometry, tolerance = 1e-4 ) {\n\n\ttolerance = Math.max( tolerance, Number.EPSILON );\n\n\t// Generate an index buffer if the geometry doesn't have one, or optimize it\n\t// if it's already available.\n\tconst hashToIndex = {};\n\tconst indices = geometry.getIndex();\n\tconst positions = geometry.getAttribute( 'position' );\n\tconst vertexCount = indices ? indices.count : positions.count;\n\n\t// next value for triangle indices\n\tlet nextIndex = 0;\n\n\t// attributes and new attribute arrays\n\tconst attributeNames = Object.keys( geometry.attributes );\n\tconst tmpAttributes = {};\n\tconst tmpMorphAttributes = {};\n\tconst newIndices = [];\n\tconst getters = [ 'getX', 'getY', 'getZ', 'getW' ];\n\tconst setters = [ 'setX', 'setY', 'setZ', 'setW' ];\n\n\t// Initialize the arrays, allocating space conservatively. Extra\n\t// space will be trimmed in the last step.\n\tfor ( let i = 0, l = attributeNames.length; i < l; i ++ ) {\n\n\t\tconst name = attributeNames[ i ];\n\t\tconst attr = geometry.attributes[ name ];\n\n\t\ttmpAttributes[ name ] = new attr.constructor(\n\t\t\tnew attr.array.constructor( attr.count * attr.itemSize ),\n\t\t\tattr.itemSize,\n\t\t\tattr.normalized\n\t\t);\n\n\t\tconst morphAttributes = geometry.morphAttributes[ name ];\n\t\tif ( morphAttributes ) {\n\n\t\t\tif ( ! tmpMorphAttributes[ name ] ) tmpMorphAttributes[ name ] = [];\n\t\t\tmorphAttributes.forEach( ( morphAttr, i ) => {\n\n\t\t\t\tconst array = new morphAttr.array.constructor( morphAttr.count * morphAttr.itemSize );\n\t\t\t\ttmpMorphAttributes[ name ][ i ] = new morphAttr.constructor( array, morphAttr.itemSize, morphAttr.normalized );\n\n\t\t\t} );\n\n\t\t}\n\n\t}\n\n\t// convert the error tolerance to an amount of decimal places to truncate to\n\tconst halfTolerance = tolerance * 0.5;\n\tconst exponent = Math.log10( 1 / tolerance );\n\tconst hashMultiplier = Math.pow( 10, exponent );\n\tconst hashAdditive = halfTolerance * hashMultiplier;\n\tfor ( let i = 0; i < vertexCount; i ++ ) {\n\n\t\tconst index = indices ? indices.getX( i ) : i;\n\n\t\t// Generate a hash for the vertex attributes at the current index 'i'\n\t\tlet hash = '';\n\t\tfor ( let j = 0, l = attributeNames.length; j < l; j ++ ) {\n\n\t\t\tconst name = attributeNames[ j ];\n\t\t\tconst attribute = geometry.getAttribute( name );\n\t\t\tconst itemSize = attribute.itemSize;\n\n\t\t\tfor ( let k = 0; k < itemSize; k ++ ) {\n\n\t\t\t\t// double tilde truncates the decimal value\n\t\t\t\thash += `${ ~ ~ ( attribute[ getters[ k ] ]( index ) * hashMultiplier + hashAdditive ) },`;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Add another reference to the vertex if it's already\n\t\t// used by another index\n\t\tif ( hash in hashToIndex ) {\n\n\t\t\tnewIndices.push( hashToIndex[ hash ] );\n\n\t\t} else {\n\n\t\t\t// copy data to the new index in the temporary attributes\n\t\t\tfor ( let j = 0, l = attributeNames.length; j < l; j ++ ) {\n\n\t\t\t\tconst name = attributeNames[ j ];\n\t\t\t\tconst attribute = geometry.getAttribute( name );\n\t\t\t\tconst morphAttributes = geometry.morphAttributes[ name ];\n\t\t\t\tconst itemSize = attribute.itemSize;\n\t\t\t\tconst newArray = tmpAttributes[ name ];\n\t\t\t\tconst newMorphArrays = tmpMorphAttributes[ name ];\n\n\t\t\t\tfor ( let k = 0; k < itemSize; k ++ ) {\n\n\t\t\t\t\tconst getterFunc = getters[ k ];\n\t\t\t\t\tconst setterFunc = setters[ k ];\n\t\t\t\t\tnewArray[ setterFunc ]( nextIndex, attribute[ getterFunc ]( index ) );\n\n\t\t\t\t\tif ( morphAttributes ) {\n\n\t\t\t\t\t\tfor ( let m = 0, ml = morphAttributes.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\t\tnewMorphArrays[ m ][ setterFunc ]( nextIndex, morphAttributes[ m ][ getterFunc ]( index ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\thashToIndex[ hash ] = nextIndex;\n\t\t\tnewIndices.push( nextIndex );\n\t\t\tnextIndex ++;\n\n\t\t}\n\n\t}\n\n\t// generate result BufferGeometry\n\tconst result = geometry.clone();\n\tfor ( const name in geometry.attributes ) {\n\n\t\tconst tmpAttribute = tmpAttributes[ name ];\n\n\t\tresult.setAttribute( name, new tmpAttribute.constructor(\n\t\t\ttmpAttribute.array.slice( 0, nextIndex * tmpAttribute.itemSize ),\n\t\t\ttmpAttribute.itemSize,\n\t\t\ttmpAttribute.normalized,\n\t\t) );\n\n\t\tif ( ! ( name in tmpMorphAttributes ) ) continue;\n\n\t\tfor ( let j = 0; j < tmpMorphAttributes[ name ].length; j ++ ) {\n\n\t\t\tconst tmpMorphAttribute = tmpMorphAttributes[ name ][ j ];\n\n\t\t\tresult.morphAttributes[ name ][ j ] = new tmpMorphAttribute.constructor(\n\t\t\t\ttmpMorphAttribute.array.slice( 0, nextIndex * tmpMorphAttribute.itemSize ),\n\t\t\t\ttmpMorphAttribute.itemSize,\n\t\t\t\ttmpMorphAttribute.normalized,\n\t\t\t);\n\n\t\t}\n\n\t}\n\n\t// indices\n\n\tresult.setIndex( newIndices );\n\n\treturn result;\n\n}\n\n/**\n * Returns a new indexed geometry based on `TrianglesDrawMode` draw mode.\n * This mode corresponds to the `gl.TRIANGLES` primitive in WebGL.\n *\n * @param {BufferGeometry} geometry - The geometry to convert.\n * @param {number} drawMode - The current draw mode.\n * @return {BufferGeometry} The new geometry using `TrianglesDrawMode`.\n */\nfunction toTrianglesDrawMode( geometry, drawMode ) {\n\n\tif ( drawMode === TrianglesDrawMode ) {\n\n\t\tconsole.warn( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Geometry already defined as triangles.' );\n\t\treturn geometry;\n\n\t}\n\n\tif ( drawMode === TriangleFanDrawMode || drawMode === TriangleStripDrawMode ) {\n\n\t\tlet index = geometry.getIndex();\n\n\t\t// generate index if not present\n\n\t\tif ( index === null ) {\n\n\t\t\tconst indices = [];\n\n\t\t\tconst position = geometry.getAttribute( 'position' );\n\n\t\t\tif ( position !== undefined ) {\n\n\t\t\t\tfor ( let i = 0; i < position.count; i ++ ) {\n\n\t\t\t\t\tindices.push( i );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.setIndex( indices );\n\t\t\t\tindex = geometry.getIndex();\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Undefined position attribute. Processing not possible.' );\n\t\t\t\treturn geometry;\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tconst numberOfTriangles = index.count - 2;\n\t\tconst newIndices = [];\n\n\t\tif ( drawMode === TriangleFanDrawMode ) {\n\n\t\t\t// gl.TRIANGLE_FAN\n\n\t\t\tfor ( let i = 1; i <= numberOfTriangles; i ++ ) {\n\n\t\t\t\tnewIndices.push( index.getX( 0 ) );\n\t\t\t\tnewIndices.push( index.getX( i ) );\n\t\t\t\tnewIndices.push( index.getX( i + 1 ) );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// gl.TRIANGLE_STRIP\n\n\t\t\tfor ( let i = 0; i < numberOfTriangles; i ++ ) {\n\n\t\t\t\tif ( i % 2 === 0 ) {\n\n\t\t\t\t\tnewIndices.push( index.getX( i ) );\n\t\t\t\t\tnewIndices.push( index.getX( i + 1 ) );\n\t\t\t\t\tnewIndices.push( index.getX( i + 2 ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tnewIndices.push( index.getX( i + 2 ) );\n\t\t\t\t\tnewIndices.push( index.getX( i + 1 ) );\n\t\t\t\t\tnewIndices.push( index.getX( i ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( ( newIndices.length / 3 ) !== numberOfTriangles ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unable to generate correct amount of triangles.' );\n\n\t\t}\n\n\t\t// build final geometry\n\n\t\tconst newGeometry = geometry.clone();\n\t\tnewGeometry.setIndex( newIndices );\n\t\tnewGeometry.clearGroups();\n\n\t\treturn newGeometry;\n\n\t} else {\n\n\t\tconsole.error( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unknown draw mode:', drawMode );\n\t\treturn geometry;\n\n\t}\n\n}\n\n/**\n * Calculates the morphed attributes of a morphed/skinned BufferGeometry.\n *\n * Helpful for Raytracing or Decals (i.e. a `DecalGeometry` applied to a morphed Object with a `BufferGeometry`\n * will use the original `BufferGeometry`, not the morphed/skinned one, generating an incorrect result.\n * Using this function to create a shadow `Object3`D the `DecalGeometry` can be correctly generated).\n *\n * @param {Mesh|Line|Points} object - The 3D object to compute morph attributes for.\n * @return {Object} An object with original position/normal attributes and morphed ones.\n */\nfunction computeMorphedAttributes( object ) {\n\n\tconst _vA = new Vector3();\n\tconst _vB = new Vector3();\n\tconst _vC = new Vector3();\n\n\tconst _tempA = new Vector3();\n\tconst _tempB = new Vector3();\n\tconst _tempC = new Vector3();\n\n\tconst _morphA = new Vector3();\n\tconst _morphB = new Vector3();\n\tconst _morphC = new Vector3();\n\n\tfunction _calculateMorphedAttributeData(\n\t\tobject,\n\t\tattribute,\n\t\tmorphAttribute,\n\t\tmorphTargetsRelative,\n\t\ta,\n\t\tb,\n\t\tc,\n\t\tmodifiedAttributeArray\n\t) {\n\n\t\t_vA.fromBufferAttribute( attribute, a );\n\t\t_vB.fromBufferAttribute( attribute, b );\n\t\t_vC.fromBufferAttribute( attribute, c );\n\n\t\tconst morphInfluences = object.morphTargetInfluences;\n\n\t\tif ( morphAttribute && morphInfluences ) {\n\n\t\t\t_morphA.set( 0, 0, 0 );\n\t\t\t_morphB.set( 0, 0, 0 );\n\t\t\t_morphC.set( 0, 0, 0 );\n\n\t\t\tfor ( let i = 0, il = morphAttribute.length; i < il; i ++ ) {\n\n\t\t\t\tconst influence = morphInfluences[ i ];\n\t\t\t\tconst morph = morphAttribute[ i ];\n\n\t\t\t\tif ( influence === 0 ) continue;\n\n\t\t\t\t_tempA.fromBufferAttribute( morph, a );\n\t\t\t\t_tempB.fromBufferAttribute( morph, b );\n\t\t\t\t_tempC.fromBufferAttribute( morph, c );\n\n\t\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\t\t_morphA.addScaledVector( _tempA, influence );\n\t\t\t\t\t_morphB.addScaledVector( _tempB, influence );\n\t\t\t\t\t_morphC.addScaledVector( _tempC, influence );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_morphA.addScaledVector( _tempA.sub( _vA ), influence );\n\t\t\t\t\t_morphB.addScaledVector( _tempB.sub( _vB ), influence );\n\t\t\t\t\t_morphC.addScaledVector( _tempC.sub( _vC ), influence );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_vA.add( _morphA );\n\t\t\t_vB.add( _morphB );\n\t\t\t_vC.add( _morphC );\n\n\t\t}\n\n\t\tif ( object.isSkinnedMesh ) {\n\n\t\t\tobject.applyBoneTransform( a, _vA );\n\t\t\tobject.applyBoneTransform( b, _vB );\n\t\t\tobject.applyBoneTransform( c, _vC );\n\n\t\t}\n\n\t\tmodifiedAttributeArray[ a * 3 + 0 ] = _vA.x;\n\t\tmodifiedAttributeArray[ a * 3 + 1 ] = _vA.y;\n\t\tmodifiedAttributeArray[ a * 3 + 2 ] = _vA.z;\n\t\tmodifiedAttributeArray[ b * 3 + 0 ] = _vB.x;\n\t\tmodifiedAttributeArray[ b * 3 + 1 ] = _vB.y;\n\t\tmodifiedAttributeArray[ b * 3 + 2 ] = _vB.z;\n\t\tmodifiedAttributeArray[ c * 3 + 0 ] = _vC.x;\n\t\tmodifiedAttributeArray[ c * 3 + 1 ] = _vC.y;\n\t\tmodifiedAttributeArray[ c * 3 + 2 ] = _vC.z;\n\n\t}\n\n\tconst geometry = object.geometry;\n\tconst material = object.material;\n\n\tlet a, b, c;\n\tconst index = geometry.index;\n\tconst positionAttribute = geometry.attributes.position;\n\tconst morphPosition = geometry.morphAttributes.position;\n\tconst morphTargetsRelative = geometry.morphTargetsRelative;\n\tconst normalAttribute = geometry.attributes.normal;\n\tconst morphNormal = geometry.morphAttributes.position;\n\n\tconst groups = geometry.groups;\n\tconst drawRange = geometry.drawRange;\n\tlet i, j, il, jl;\n\tlet group;\n\tlet start, end;\n\n\tconst modifiedPosition = new Float32Array( positionAttribute.count * positionAttribute.itemSize );\n\tconst modifiedNormal = new Float32Array( normalAttribute.count * normalAttribute.itemSize );\n\n\tif ( index !== null ) {\n\n\t\t// indexed buffer geometry\n\n\t\tif ( Array.isArray( material ) ) {\n\n\t\t\tfor ( i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\tgroup = groups[ i ];\n\n\t\t\t\tstart = Math.max( group.start, drawRange.start );\n\t\t\t\tend = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );\n\n\t\t\t\tfor ( j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\ta = index.getX( j );\n\t\t\t\t\tb = index.getX( j + 1 );\n\t\t\t\t\tc = index.getX( j + 2 );\n\n\t\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\t\tobject,\n\t\t\t\t\t\tpositionAttribute,\n\t\t\t\t\t\tmorphPosition,\n\t\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\t\ta, b, c,\n\t\t\t\t\t\tmodifiedPosition\n\t\t\t\t\t);\n\n\t\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\t\tobject,\n\t\t\t\t\t\tnormalAttribute,\n\t\t\t\t\t\tmorphNormal,\n\t\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\t\ta, b, c,\n\t\t\t\t\t\tmodifiedNormal\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tstart = Math.max( 0, drawRange.start );\n\t\t\tend = Math.min( index.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\tfor ( i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\ta = index.getX( i );\n\t\t\t\tb = index.getX( i + 1 );\n\t\t\t\tc = index.getX( i + 2 );\n\n\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\tobject,\n\t\t\t\t\tpositionAttribute,\n\t\t\t\t\tmorphPosition,\n\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\ta, b, c,\n\t\t\t\t\tmodifiedPosition\n\t\t\t\t);\n\n\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\tobject,\n\t\t\t\t\tnormalAttribute,\n\t\t\t\t\tmorphNormal,\n\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\ta, b, c,\n\t\t\t\t\tmodifiedNormal\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t} else {\n\n\t\t// non-indexed buffer geometry\n\n\t\tif ( Array.isArray( material ) ) {\n\n\t\t\tfor ( i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\tgroup = groups[ i ];\n\n\t\t\t\tstart = Math.max( group.start, drawRange.start );\n\t\t\t\tend = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );\n\n\t\t\t\tfor ( j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\ta = j;\n\t\t\t\t\tb = j + 1;\n\t\t\t\t\tc = j + 2;\n\n\t\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\t\tobject,\n\t\t\t\t\t\tpositionAttribute,\n\t\t\t\t\t\tmorphPosition,\n\t\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\t\ta, b, c,\n\t\t\t\t\t\tmodifiedPosition\n\t\t\t\t\t);\n\n\t\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\t\tobject,\n\t\t\t\t\t\tnormalAttribute,\n\t\t\t\t\t\tmorphNormal,\n\t\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\t\ta, b, c,\n\t\t\t\t\t\tmodifiedNormal\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tstart = Math.max( 0, drawRange.start );\n\t\t\tend = Math.min( positionAttribute.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\tfor ( i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\ta = i;\n\t\t\t\tb = i + 1;\n\t\t\t\tc = i + 2;\n\n\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\tobject,\n\t\t\t\t\tpositionAttribute,\n\t\t\t\t\tmorphPosition,\n\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\ta, b, c,\n\t\t\t\t\tmodifiedPosition\n\t\t\t\t);\n\n\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\tobject,\n\t\t\t\t\tnormalAttribute,\n\t\t\t\t\tmorphNormal,\n\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\ta, b, c,\n\t\t\t\t\tmodifiedNormal\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tconst morphedPositionAttribute = new Float32BufferAttribute( modifiedPosition, 3 );\n\tconst morphedNormalAttribute = new Float32BufferAttribute( modifiedNormal, 3 );\n\n\treturn {\n\n\t\tpositionAttribute: positionAttribute,\n\t\tnormalAttribute: normalAttribute,\n\t\tmorphedPositionAttribute: morphedPositionAttribute,\n\t\tmorphedNormalAttribute: morphedNormalAttribute\n\n\t};\n\n}\n\n/**\n * Merges the {@link BufferGeometry#groups} for the given geometry.\n *\n * @param {BufferGeometry} geometry - The geometry to modify.\n * @return {BufferGeometry} - The updated geometry\n */\nfunction mergeGroups( geometry ) {\n\n\tif ( geometry.groups.length === 0 ) {\n\n\t\tconsole.warn( 'THREE.BufferGeometryUtils.mergeGroups(): No groups are defined. Nothing to merge.' );\n\t\treturn geometry;\n\n\t}\n\n\tlet groups = geometry.groups;\n\n\t// sort groups by material index\n\n\tgroups = groups.sort( ( a, b ) => {\n\n\t\tif ( a.materialIndex !== b.materialIndex ) return a.materialIndex - b.materialIndex;\n\n\t\treturn a.start - b.start;\n\n\t} );\n\n\t// create index for non-indexed geometries\n\n\tif ( geometry.getIndex() === null ) {\n\n\t\tconst positionAttribute = geometry.getAttribute( 'position' );\n\t\tconst indices = [];\n\n\t\tfor ( let i = 0; i < positionAttribute.count; i += 3 ) {\n\n\t\t\tindices.push( i, i + 1, i + 2 );\n\n\t\t}\n\n\t\tgeometry.setIndex( indices );\n\n\t}\n\n\t// sort index\n\n\tconst index = geometry.getIndex();\n\n\tconst newIndices = [];\n\n\tfor ( let i = 0; i < groups.length; i ++ ) {\n\n\t\tconst group = groups[ i ];\n\n\t\tconst groupStart = group.start;\n\t\tconst groupLength = groupStart + group.count;\n\n\t\tfor ( let j = groupStart; j < groupLength; j ++ ) {\n\n\t\t\tnewIndices.push( index.getX( j ) );\n\n\t\t}\n\n\t}\n\n\tgeometry.dispose(); // Required to force buffer recreation\n\tgeometry.setIndex( newIndices );\n\n\t// update groups indices\n\n\tlet start = 0;\n\n\tfor ( let i = 0; i < groups.length; i ++ ) {\n\n\t\tconst group = groups[ i ];\n\n\t\tgroup.start = start;\n\t\tstart += group.count;\n\n\t}\n\n\t// merge groups\n\n\tlet currentGroup = groups[ 0 ];\n\n\tgeometry.groups = [ currentGroup ];\n\n\tfor ( let i = 1; i < groups.length; i ++ ) {\n\n\t\tconst group = groups[ i ];\n\n\t\tif ( currentGroup.materialIndex === group.materialIndex ) {\n\n\t\t\tcurrentGroup.count += group.count;\n\n\t\t} else {\n\n\t\t\tcurrentGroup = group;\n\t\t\tgeometry.groups.push( currentGroup );\n\n\t\t}\n\n\t}\n\n\treturn geometry;\n\n}\n\n/**\n * Modifies the supplied geometry if it is non-indexed, otherwise creates a new,\n * non-indexed geometry. Returns the geometry with smooth normals everywhere except\n * faces that meet at an angle greater than the crease angle.\n *\n * @param {BufferGeometry} geometry - The geometry to modify.\n * @param {number} [creaseAngle=Math.PI/3] - The crease angle in radians.\n * @return {BufferGeometry} - The updated geometry\n */\nfunction toCreasedNormals( geometry, creaseAngle = Math.PI / 3 /* 60 degrees */ ) {\n\n\tconst creaseDot = Math.cos( creaseAngle );\n\tconst hashMultiplier = ( 1 + 1e-10 ) * 1e2;\n\n\t// reusable vectors\n\tconst verts = [ new Vector3(), new Vector3(), new Vector3() ];\n\tconst tempVec1 = new Vector3();\n\tconst tempVec2 = new Vector3();\n\tconst tempNorm = new Vector3();\n\tconst tempNorm2 = new Vector3();\n\n\t// hashes a vector\n\tfunction hashVertex( v ) {\n\n\t\tconst x = ~ ~ ( v.x * hashMultiplier );\n\t\tconst y = ~ ~ ( v.y * hashMultiplier );\n\t\tconst z = ~ ~ ( v.z * hashMultiplier );\n\t\treturn `${x},${y},${z}`;\n\n\t}\n\n\t// BufferGeometry.toNonIndexed() warns if the geometry is non-indexed\n\t// and returns the original geometry\n\tconst resultGeometry = geometry.index ? geometry.toNonIndexed() : geometry;\n\tconst posAttr = resultGeometry.attributes.position;\n\tconst vertexMap = {};\n\n\t// find all the normals shared by commonly located vertices\n\tfor ( let i = 0, l = posAttr.count / 3; i < l; i ++ ) {\n\n\t\tconst i3 = 3 * i;\n\t\tconst a = verts[ 0 ].fromBufferAttribute( posAttr, i3 + 0 );\n\t\tconst b = verts[ 1 ].fromBufferAttribute( posAttr, i3 + 1 );\n\t\tconst c = verts[ 2 ].fromBufferAttribute( posAttr, i3 + 2 );\n\n\t\ttempVec1.subVectors( c, b );\n\t\ttempVec2.subVectors( a, b );\n\n\t\t// add the normal to the map for all vertices\n\t\tconst normal = new Vector3().crossVectors( tempVec1, tempVec2 ).normalize();\n\t\tfor ( let n = 0; n < 3; n ++ ) {\n\n\t\t\tconst vert = verts[ n ];\n\t\t\tconst hash = hashVertex( vert );\n\t\t\tif ( ! ( hash in vertexMap ) ) {\n\n\t\t\t\tvertexMap[ hash ] = [];\n\n\t\t\t}\n\n\t\t\tvertexMap[ hash ].push( normal );\n\n\t\t}\n\n\t}\n\n\t// average normals from all vertices that share a common location if they are within the\n\t// provided crease threshold\n\tconst normalArray = new Float32Array( posAttr.count * 3 );\n\tconst normAttr = new BufferAttribute( normalArray, 3, false );\n\tfor ( let i = 0, l = posAttr.count / 3; i < l; i ++ ) {\n\n\t\t// get the face normal for this vertex\n\t\tconst i3 = 3 * i;\n\t\tconst a = verts[ 0 ].fromBufferAttribute( posAttr, i3 + 0 );\n\t\tconst b = verts[ 1 ].fromBufferAttribute( posAttr, i3 + 1 );\n\t\tconst c = verts[ 2 ].fromBufferAttribute( posAttr, i3 + 2 );\n\n\t\ttempVec1.subVectors( c, b );\n\t\ttempVec2.subVectors( a, b );\n\n\t\ttempNorm.crossVectors( tempVec1, tempVec2 ).normalize();\n\n\t\t// average all normals that meet the threshold and set the normal value\n\t\tfor ( let n = 0; n < 3; n ++ ) {\n\n\t\t\tconst vert = verts[ n ];\n\t\t\tconst hash = hashVertex( vert );\n\t\t\tconst otherNormals = vertexMap[ hash ];\n\t\t\ttempNorm2.set( 0, 0, 0 );\n\n\t\t\tfor ( let k = 0, lk = otherNormals.length; k < lk; k ++ ) {\n\n\t\t\t\tconst otherNorm = otherNormals[ k ];\n\t\t\t\tif ( tempNorm.dot( otherNorm ) > creaseDot ) {\n\n\t\t\t\t\ttempNorm2.add( otherNorm );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\ttempNorm2.normalize();\n\t\t\tnormAttr.setXYZ( i3 + n, tempNorm2.x, tempNorm2.y, tempNorm2.z );\n\n\t\t}\n\n\t}\n\n\tresultGeometry.setAttribute( 'normal', normAttr );\n\treturn resultGeometry;\n\n}\n\nexport {\n\tcomputeMikkTSpaceTangents,\n\tmergeGeometries,\n\tmergeAttributes,\n\tdeepCloneAttribute,\n\tdeinterleaveAttribute,\n\tdeinterleaveGeometry,\n\tinterleaveAttributes,\n\testimateBytesUsed,\n\tmergeVertices,\n\ttoTrianglesDrawMode,\n\tcomputeMorphedAttributes,\n\tmergeGroups,\n\ttoCreasedNormals\n};\n","import {\n\tAnimationClip,\n\tBone,\n\tBox3,\n\tBufferAttribute,\n\tBufferGeometry,\n\tClampToEdgeWrapping,\n\tColor,\n\tColorManagement,\n\tDirectionalLight,\n\tDoubleSide,\n\tFileLoader,\n\tFrontSide,\n\tGroup,\n\tImageBitmapLoader,\n\tInstancedMesh,\n\tInterleavedBuffer,\n\tInterleavedBufferAttribute,\n\tInterpolant,\n\tInterpolateDiscrete,\n\tInterpolateLinear,\n\tLine,\n\tLineBasicMaterial,\n\tLineLoop,\n\tLineSegments,\n\tLinearFilter,\n\tLinearMipmapLinearFilter,\n\tLinearMipmapNearestFilter,\n\tLinearSRGBColorSpace,\n\tLoader,\n\tLoaderUtils,\n\tMaterial,\n\tMathUtils,\n\tMatrix4,\n\tMesh,\n\tMeshBasicMaterial,\n\tMeshPhysicalMaterial,\n\tMeshStandardMaterial,\n\tMirroredRepeatWrapping,\n\tNearestFilter,\n\tNearestMipmapLinearFilter,\n\tNearestMipmapNearestFilter,\n\tNumberKeyframeTrack,\n\tObject3D,\n\tOrthographicCamera,\n\tPerspectiveCamera,\n\tPointLight,\n\tPoints,\n\tPointsMaterial,\n\tPropertyBinding,\n\tQuaternion,\n\tQuaternionKeyframeTrack,\n\tRepeatWrapping,\n\tSkeleton,\n\tSkinnedMesh,\n\tSphere,\n\tSpotLight,\n\tTexture,\n\tTextureLoader,\n\tTriangleFanDrawMode,\n\tTriangleStripDrawMode,\n\tVector2,\n\tVector3,\n\tVectorKeyframeTrack,\n\tSRGBColorSpace,\n\tInstancedBufferAttribute\n} from 'three';\nimport { toTrianglesDrawMode } from '../utils/BufferGeometryUtils.js';\n\n/**\n * A loader for the glTF 2.0 format.\n *\n * [glTF]{@link https://www.khronos.org/gltf/} (GL Transmission Format) is an [open format specification]{@link https://github.com/KhronosGroup/glTF/tree/main/specification/2.0}\n * for efficient delivery and loading of 3D content. Assets may be provided either in JSON (.gltf) or binary (.glb)\n * format. External files store textures (.jpg, .png) and additional binary data (.bin). A glTF asset may deliver\n * one or more scenes, including meshes, materials, textures, skins, skeletons, morph targets, animations, lights,\n * and/or cameras.\n *\n * `GLTFLoader` uses {@link ImageBitmapLoader} whenever possible. Be advised that image bitmaps are not\n * automatically GC-collected when they are no longer referenced, and they require special handling during\n * the disposal process.\n *\n * `GLTFLoader` supports the following glTF 2.0 extensions:\n * - KHR_draco_mesh_compression\n * - KHR_materials_clearcoat\n * - KHR_materials_dispersion\n * - KHR_materials_ior\n * - KHR_materials_specular\n * - KHR_materials_transmission\n * - KHR_materials_iridescence\n * - KHR_materials_unlit\n * - KHR_materials_volume\n * - KHR_mesh_quantization\n * - KHR_lights_punctual\n * - KHR_texture_basisu\n * - KHR_texture_transform\n * - EXT_texture_webp\n * - EXT_meshopt_compression\n * - EXT_mesh_gpu_instancing\n *\n * The following glTF 2.0 extension is supported by an external user plugin:\n * - [KHR_materials_variants]{@link https://github.com/takahirox/three-gltf-extensions}\n * - [MSFT_texture_dds]{@link https://github.com/takahirox/three-gltf-extensions}\n *\n * ```js\n * const loader = new GLTFLoader();\n *\n * // Optional: Provide a DRACOLoader instance to decode compressed mesh data\n * const dracoLoader = new DRACOLoader();\n * dracoLoader.setDecoderPath( '/examples/jsm/libs/draco/' );\n * loader.setDRACOLoader( dracoLoader );\n *\n * const gltf = await loader.loadAsync( 'models/gltf/duck/duck.gltf' );\n * scene.add( gltf.scene );\n * ```\n *\n * @augments Loader\n * @three_import import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';\n */\nclass GLTFLoader extends Loader {\n\n\t/**\n\t * Constructs a new glTF loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\tthis.dracoLoader = null;\n\t\tthis.ktx2Loader = null;\n\t\tthis.meshoptDecoder = null;\n\n\t\tthis.pluginCallbacks = [];\n\n\t\tthis.register( function ( parser ) {\n\n\t\t\treturn new GLTFMaterialsClearcoatExtension( parser );\n\n\t\t} );\n\n\t\tthis.register( function ( parser ) {\n\n\t\t\treturn new GLTFMaterialsDispersionExtension( parser );\n\n\t\t} );\n\n\t\tthis.register( function ( parser ) {\n\n\t\t\treturn new GLTFTextureBasisUExtension( parser );\n\n\t\t} );\n\n\t\tthis.register( function ( parser ) {\n\n\t\t\treturn new GLTFTextureWebPExtension( parser );\n\n\t\t} );\n\n\t\tthis.register( function ( parser ) {\n\n\t\t\treturn new GLTFTextureAVIFExtension( parser );\n\n\t\t} );\n\n\t\tthis.register( function ( parser ) {\n\n\t\t\treturn new GLTFMaterialsSheenExtension( parser );\n\n\t\t} );\n\n\t\tthis.register( function ( parser ) {\n\n\t\t\treturn new GLTFMaterialsTransmissionExtension( parser );\n\n\t\t} );\n\n\t\tthis.register( function ( parser ) {\n\n\t\t\treturn new GLTFMaterialsVolumeExtension( parser );\n\n\t\t} );\n\n\t\tthis.register( function ( parser ) {\n\n\t\t\treturn new GLTFMaterialsIorExtension( parser );\n\n\t\t} );\n\n\t\tthis.register( function ( parser ) {\n\n\t\t\treturn new GLTFMaterialsEmissiveStrengthExtension( parser );\n\n\t\t} );\n\n\t\tthis.register( function ( parser ) {\n\n\t\t\treturn new GLTFMaterialsSpecularExtension( parser );\n\n\t\t} );\n\n\t\tthis.register( function ( parser ) {\n\n\t\t\treturn new GLTFMaterialsIridescenceExtension( parser );\n\n\t\t} );\n\n\t\tthis.register( function ( parser ) {\n\n\t\t\treturn new GLTFMaterialsAnisotropyExtension( parser );\n\n\t\t} );\n\n\t\tthis.register( function ( parser ) {\n\n\t\t\treturn new GLTFMaterialsBumpExtension( parser );\n\n\t\t} );\n\n\t\tthis.register( function ( parser ) {\n\n\t\t\treturn new GLTFLightsExtension( parser );\n\n\t\t} );\n\n\t\tthis.register( function ( parser ) {\n\n\t\t\treturn new GLTFMeshoptCompression( parser );\n\n\t\t} );\n\n\t\tthis.register( function ( parser ) {\n\n\t\t\treturn new GLTFMeshGpuInstancing( parser );\n\n\t\t} );\n\n\t}\n\n\t/**\n\t * Starts loading from the given URL and passes the loaded glTF asset\n\t * to the `onLoad()` callback.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function(GLTFLoader~LoadObject)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t */\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tlet resourcePath;\n\n\t\tif ( this.resourcePath !== '' ) {\n\n\t\t\tresourcePath = this.resourcePath;\n\n\t\t} else if ( this.path !== '' ) {\n\n\t\t\t// If a base path is set, resources will be relative paths from that plus the relative path of the gltf file\n\t\t\t// Example  path = 'https://my-cnd-server.com/', url = 'assets/models/model.gltf'\n\t\t\t// resourcePath = 'https://my-cnd-server.com/assets/models/'\n\t\t\t// referenced resource 'model.bin' will be loaded from 'https://my-cnd-server.com/assets/models/model.bin'\n\t\t\t// referenced resource '../textures/texture.png' will be loaded from 'https://my-cnd-server.com/assets/textures/texture.png'\n\t\t\tconst relativeUrl = LoaderUtils.extractUrlBase( url );\n\t\t\tresourcePath = LoaderUtils.resolveURL( relativeUrl, this.path );\n\n\t\t} else {\n\n\t\t\tresourcePath = LoaderUtils.extractUrlBase( url );\n\n\t\t}\n\n\t\t// Tells the LoadingManager to track an extra item, which resolves after\n\t\t// the model is fully loaded. This means the count of items loaded will\n\t\t// be incorrect, but ensures manager.onLoad() does not fire early.\n\t\tthis.manager.itemStart( url );\n\n\t\tconst _onError = function ( e ) {\n\n\t\t\tif ( onError ) {\n\n\t\t\t\tonError( e );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( e );\n\n\t\t\t}\n\n\t\t\tscope.manager.itemError( url );\n\t\t\tscope.manager.itemEnd( url );\n\n\t\t};\n\n\t\tconst loader = new FileLoader( this.manager );\n\n\t\tloader.setPath( this.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\n\t\tloader.load( url, function ( data ) {\n\n\t\t\ttry {\n\n\t\t\t\tscope.parse( data, resourcePath, function ( gltf ) {\n\n\t\t\t\t\tonLoad( gltf );\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, _onError );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\t_onError( e );\n\n\t\t\t}\n\n\t\t}, onProgress, _onError );\n\n\t}\n\n\t/**\n\t * Sets the given Draco loader to this loader. Required for decoding assets\n\t * compressed with the `KHR_draco_mesh_compression` extension.\n\t *\n\t * @param {DRACOLoader} dracoLoader - The Draco loader to set.\n\t * @return {GLTFLoader} A reference to this loader.\n\t */\n\tsetDRACOLoader( dracoLoader ) {\n\n\t\tthis.dracoLoader = dracoLoader;\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the given KTX2 loader to this loader. Required for loading KTX2\n\t * compressed textures.\n\t *\n\t * @param {KTX2Loader} ktx2Loader - The KTX2 loader to set.\n\t * @return {GLTFLoader} A reference to this loader.\n\t */\n\tsetKTX2Loader( ktx2Loader ) {\n\n\t\tthis.ktx2Loader = ktx2Loader;\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the given meshopt decoder. Required for decoding assets\n\t * compressed with the `EXT_meshopt_compression` extension.\n\t *\n\t * @param {Object} meshoptDecoder - The meshopt decoder to set.\n\t * @return {GLTFLoader} A reference to this loader.\n\t */\n\tsetMeshoptDecoder( meshoptDecoder ) {\n\n\t\tthis.meshoptDecoder = meshoptDecoder;\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Registers a plugin callback. This API is internally used to implement the various\n\t * glTF extensions but can also used by third-party code to add additional logic\n\t * to the loader.\n\t *\n\t * @param {function(parser:GLTFParser)} callback - The callback function to register.\n\t * @return {GLTFLoader} A reference to this loader.\n\t */\n\tregister( callback ) {\n\n\t\tif ( this.pluginCallbacks.indexOf( callback ) === - 1 ) {\n\n\t\t\tthis.pluginCallbacks.push( callback );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Unregisters a plugin callback.\n\t *\n\t * @param {Function} callback - The callback function to unregister.\n\t * @return {GLTFLoader} A reference to this loader.\n\t */\n\tunregister( callback ) {\n\n\t\tif ( this.pluginCallbacks.indexOf( callback ) !== - 1 ) {\n\n\t\t\tthis.pluginCallbacks.splice( this.pluginCallbacks.indexOf( callback ), 1 );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Parses the given FBX data and returns the resulting group.\n\t *\n\t * @param {string|ArrayBuffer} data - The raw glTF data.\n\t * @param {string} path - The URL base path.\n\t * @param {function(GLTFLoader~LoadObject)} onLoad - Executed when the loading process has been finished.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t */\n\tparse( data, path, onLoad, onError ) {\n\n\t\tlet json;\n\t\tconst extensions = {};\n\t\tconst plugins = {};\n\t\tconst textDecoder = new TextDecoder();\n\n\t\tif ( typeof data === 'string' ) {\n\n\t\t\tjson = JSON.parse( data );\n\n\t\t} else if ( data instanceof ArrayBuffer ) {\n\n\t\t\tconst magic = textDecoder.decode( new Uint8Array( data, 0, 4 ) );\n\n\t\t\tif ( magic === BINARY_EXTENSION_HEADER_MAGIC ) {\n\n\t\t\t\ttry {\n\n\t\t\t\t\textensions[ EXTENSIONS.KHR_BINARY_GLTF ] = new GLTFBinaryExtension( data );\n\n\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\tif ( onError ) onError( error );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tjson = JSON.parse( extensions[ EXTENSIONS.KHR_BINARY_GLTF ].content );\n\n\t\t\t} else {\n\n\t\t\t\tjson = JSON.parse( textDecoder.decode( data ) );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tjson = data;\n\n\t\t}\n\n\t\tif ( json.asset === undefined || json.asset.version[ 0 ] < 2 ) {\n\n\t\t\tif ( onError ) onError( new Error( 'THREE.GLTFLoader: Unsupported asset. glTF versions >=2.0 are supported.' ) );\n\t\t\treturn;\n\n\t\t}\n\n\t\tconst parser = new GLTFParser( json, {\n\n\t\t\tpath: path || this.resourcePath || '',\n\t\t\tcrossOrigin: this.crossOrigin,\n\t\t\trequestHeader: this.requestHeader,\n\t\t\tmanager: this.manager,\n\t\t\tktx2Loader: this.ktx2Loader,\n\t\t\tmeshoptDecoder: this.meshoptDecoder\n\n\t\t} );\n\n\t\tparser.fileLoader.setRequestHeader( this.requestHeader );\n\n\t\tfor ( let i = 0; i < this.pluginCallbacks.length; i ++ ) {\n\n\t\t\tconst plugin = this.pluginCallbacks[ i ]( parser );\n\n\t\t\tif ( ! plugin.name ) console.error( 'THREE.GLTFLoader: Invalid plugin found: missing name' );\n\n\t\t\tplugins[ plugin.name ] = plugin;\n\n\t\t\t// Workaround to avoid determining as unknown extension\n\t\t\t// in addUnknownExtensionsToUserData().\n\t\t\t// Remove this workaround if we move all the existing\n\t\t\t// extension handlers to plugin system\n\t\t\textensions[ plugin.name ] = true;\n\n\t\t}\n\n\t\tif ( json.extensionsUsed ) {\n\n\t\t\tfor ( let i = 0; i < json.extensionsUsed.length; ++ i ) {\n\n\t\t\t\tconst extensionName = json.extensionsUsed[ i ];\n\t\t\t\tconst extensionsRequired = json.extensionsRequired || [];\n\n\t\t\t\tswitch ( extensionName ) {\n\n\t\t\t\t\tcase EXTENSIONS.KHR_MATERIALS_UNLIT:\n\t\t\t\t\t\textensions[ extensionName ] = new GLTFMaterialsUnlitExtension();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase EXTENSIONS.KHR_DRACO_MESH_COMPRESSION:\n\t\t\t\t\t\textensions[ extensionName ] = new GLTFDracoMeshCompressionExtension( json, this.dracoLoader );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase EXTENSIONS.KHR_TEXTURE_TRANSFORM:\n\t\t\t\t\t\textensions[ extensionName ] = new GLTFTextureTransformExtension();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase EXTENSIONS.KHR_MESH_QUANTIZATION:\n\t\t\t\t\t\textensions[ extensionName ] = new GLTFMeshQuantizationExtension();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tif ( extensionsRequired.indexOf( extensionName ) >= 0 && plugins[ extensionName ] === undefined ) {\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.GLTFLoader: Unknown extension \"' + extensionName + '\".' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tparser.setExtensions( extensions );\n\t\tparser.setPlugins( plugins );\n\t\tparser.parse( onLoad, onError );\n\n\t}\n\n\t/**\n\t * Async version of {@link GLTFLoader#parse}.\n\t *\n\t * @async\n\t * @param {string|ArrayBuffer} data - The raw glTF data.\n\t * @param {string} path - The URL base path.\n\t * @return {Promise<GLTFLoader~LoadObject>} A Promise that resolves with the loaded glTF when the parsing has been finished.\n\t */\n\tparseAsync( data, path ) {\n\n\t\tconst scope = this;\n\n\t\treturn new Promise( function ( resolve, reject ) {\n\n\t\t\tscope.parse( data, path, resolve, reject );\n\n\t\t} );\n\n\t}\n\n}\n\n/* GLTFREGISTRY */\n\nfunction GLTFRegistry() {\n\n\tlet objects = {};\n\n\treturn\t{\n\n\t\tget: function ( key ) {\n\n\t\t\treturn objects[ key ];\n\n\t\t},\n\n\t\tadd: function ( key, object ) {\n\n\t\t\tobjects[ key ] = object;\n\n\t\t},\n\n\t\tremove: function ( key ) {\n\n\t\t\tdelete objects[ key ];\n\n\t\t},\n\n\t\tremoveAll: function () {\n\n\t\t\tobjects = {};\n\n\t\t}\n\n\t};\n\n}\n\n/*********************************/\n/********** EXTENSIONS ***********/\n/*********************************/\n\nconst EXTENSIONS = {\n\tKHR_BINARY_GLTF: 'KHR_binary_glTF',\n\tKHR_DRACO_MESH_COMPRESSION: 'KHR_draco_mesh_compression',\n\tKHR_LIGHTS_PUNCTUAL: 'KHR_lights_punctual',\n\tKHR_MATERIALS_CLEARCOAT: 'KHR_materials_clearcoat',\n\tKHR_MATERIALS_DISPERSION: 'KHR_materials_dispersion',\n\tKHR_MATERIALS_IOR: 'KHR_materials_ior',\n\tKHR_MATERIALS_SHEEN: 'KHR_materials_sheen',\n\tKHR_MATERIALS_SPECULAR: 'KHR_materials_specular',\n\tKHR_MATERIALS_TRANSMISSION: 'KHR_materials_transmission',\n\tKHR_MATERIALS_IRIDESCENCE: 'KHR_materials_iridescence',\n\tKHR_MATERIALS_ANISOTROPY: 'KHR_materials_anisotropy',\n\tKHR_MATERIALS_UNLIT: 'KHR_materials_unlit',\n\tKHR_MATERIALS_VOLUME: 'KHR_materials_volume',\n\tKHR_TEXTURE_BASISU: 'KHR_texture_basisu',\n\tKHR_TEXTURE_TRANSFORM: 'KHR_texture_transform',\n\tKHR_MESH_QUANTIZATION: 'KHR_mesh_quantization',\n\tKHR_MATERIALS_EMISSIVE_STRENGTH: 'KHR_materials_emissive_strength',\n\tEXT_MATERIALS_BUMP: 'EXT_materials_bump',\n\tEXT_TEXTURE_WEBP: 'EXT_texture_webp',\n\tEXT_TEXTURE_AVIF: 'EXT_texture_avif',\n\tEXT_MESHOPT_COMPRESSION: 'EXT_meshopt_compression',\n\tEXT_MESH_GPU_INSTANCING: 'EXT_mesh_gpu_instancing'\n};\n\n/**\n * Punctual Lights Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_lights_punctual\n *\n * @private\n */\nclass GLTFLightsExtension {\n\n\tconstructor( parser ) {\n\n\t\tthis.parser = parser;\n\t\tthis.name = EXTENSIONS.KHR_LIGHTS_PUNCTUAL;\n\n\t\t// Object3D instance caches\n\t\tthis.cache = { refs: {}, uses: {} };\n\n\t}\n\n\t_markDefs() {\n\n\t\tconst parser = this.parser;\n\t\tconst nodeDefs = this.parser.json.nodes || [];\n\n\t\tfor ( let nodeIndex = 0, nodeLength = nodeDefs.length; nodeIndex < nodeLength; nodeIndex ++ ) {\n\n\t\t\tconst nodeDef = nodeDefs[ nodeIndex ];\n\n\t\t\tif ( nodeDef.extensions\n\t\t\t\t\t&& nodeDef.extensions[ this.name ]\n\t\t\t\t\t&& nodeDef.extensions[ this.name ].light !== undefined ) {\n\n\t\t\t\tparser._addNodeRef( this.cache, nodeDef.extensions[ this.name ].light );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_loadLight( lightIndex ) {\n\n\t\tconst parser = this.parser;\n\t\tconst cacheKey = 'light:' + lightIndex;\n\t\tlet dependency = parser.cache.get( cacheKey );\n\n\t\tif ( dependency ) return dependency;\n\n\t\tconst json = parser.json;\n\t\tconst extensions = ( json.extensions && json.extensions[ this.name ] ) || {};\n\t\tconst lightDefs = extensions.lights || [];\n\t\tconst lightDef = lightDefs[ lightIndex ];\n\t\tlet lightNode;\n\n\t\tconst color = new Color( 0xffffff );\n\n\t\tif ( lightDef.color !== undefined ) color.setRGB( lightDef.color[ 0 ], lightDef.color[ 1 ], lightDef.color[ 2 ], LinearSRGBColorSpace );\n\n\t\tconst range = lightDef.range !== undefined ? lightDef.range : 0;\n\n\t\tswitch ( lightDef.type ) {\n\n\t\t\tcase 'directional':\n\t\t\t\tlightNode = new DirectionalLight( color );\n\t\t\t\tlightNode.target.position.set( 0, 0, - 1 );\n\t\t\t\tlightNode.add( lightNode.target );\n\t\t\t\tbreak;\n\n\t\t\tcase 'point':\n\t\t\t\tlightNode = new PointLight( color );\n\t\t\t\tlightNode.distance = range;\n\t\t\t\tbreak;\n\n\t\t\tcase 'spot':\n\t\t\t\tlightNode = new SpotLight( color );\n\t\t\t\tlightNode.distance = range;\n\t\t\t\t// Handle spotlight properties.\n\t\t\t\tlightDef.spot = lightDef.spot || {};\n\t\t\t\tlightDef.spot.innerConeAngle = lightDef.spot.innerConeAngle !== undefined ? lightDef.spot.innerConeAngle : 0;\n\t\t\t\tlightDef.spot.outerConeAngle = lightDef.spot.outerConeAngle !== undefined ? lightDef.spot.outerConeAngle : Math.PI / 4.0;\n\t\t\t\tlightNode.angle = lightDef.spot.outerConeAngle;\n\t\t\t\tlightNode.penumbra = 1.0 - lightDef.spot.innerConeAngle / lightDef.spot.outerConeAngle;\n\t\t\t\tlightNode.target.position.set( 0, 0, - 1 );\n\t\t\t\tlightNode.add( lightNode.target );\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'THREE.GLTFLoader: Unexpected light type: ' + lightDef.type );\n\n\t\t}\n\n\t\t// Some lights (e.g. spot) default to a position other than the origin. Reset the position\n\t\t// here, because node-level parsing will only override position if explicitly specified.\n\t\tlightNode.position.set( 0, 0, 0 );\n\n\t\tassignExtrasToUserData( lightNode, lightDef );\n\n\t\tif ( lightDef.intensity !== undefined ) lightNode.intensity = lightDef.intensity;\n\n\t\tlightNode.name = parser.createUniqueName( lightDef.name || ( 'light_' + lightIndex ) );\n\n\t\tdependency = Promise.resolve( lightNode );\n\n\t\tparser.cache.add( cacheKey, dependency );\n\n\t\treturn dependency;\n\n\t}\n\n\tgetDependency( type, index ) {\n\n\t\tif ( type !== 'light' ) return;\n\n\t\treturn this._loadLight( index );\n\n\t}\n\n\tcreateNodeAttachment( nodeIndex ) {\n\n\t\tconst self = this;\n\t\tconst parser = this.parser;\n\t\tconst json = parser.json;\n\t\tconst nodeDef = json.nodes[ nodeIndex ];\n\t\tconst lightDef = ( nodeDef.extensions && nodeDef.extensions[ this.name ] ) || {};\n\t\tconst lightIndex = lightDef.light;\n\n\t\tif ( lightIndex === undefined ) return null;\n\n\t\treturn this._loadLight( lightIndex ).then( function ( light ) {\n\n\t\t\treturn parser._getNodeRef( self.cache, lightIndex, light );\n\n\t\t} );\n\n\t}\n\n}\n\n/**\n * Unlit Materials Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_unlit\n *\n * @private\n */\nclass GLTFMaterialsUnlitExtension {\n\n\tconstructor() {\n\n\t\tthis.name = EXTENSIONS.KHR_MATERIALS_UNLIT;\n\n\t}\n\n\tgetMaterialType() {\n\n\t\treturn MeshBasicMaterial;\n\n\t}\n\n\textendParams( materialParams, materialDef, parser ) {\n\n\t\tconst pending = [];\n\n\t\tmaterialParams.color = new Color( 1.0, 1.0, 1.0 );\n\t\tmaterialParams.opacity = 1.0;\n\n\t\tconst metallicRoughness = materialDef.pbrMetallicRoughness;\n\n\t\tif ( metallicRoughness ) {\n\n\t\t\tif ( Array.isArray( metallicRoughness.baseColorFactor ) ) {\n\n\t\t\t\tconst array = metallicRoughness.baseColorFactor;\n\n\t\t\t\tmaterialParams.color.setRGB( array[ 0 ], array[ 1 ], array[ 2 ], LinearSRGBColorSpace );\n\t\t\t\tmaterialParams.opacity = array[ 3 ];\n\n\t\t\t}\n\n\t\t\tif ( metallicRoughness.baseColorTexture !== undefined ) {\n\n\t\t\t\tpending.push( parser.assignTexture( materialParams, 'map', metallicRoughness.baseColorTexture, SRGBColorSpace ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn Promise.all( pending );\n\n\t}\n\n}\n\n/**\n * Materials Emissive Strength Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/blob/5768b3ce0ef32bc39cdf1bef10b948586635ead3/extensions/2.0/Khronos/KHR_materials_emissive_strength/README.md\n *\n * @private\n */\nclass GLTFMaterialsEmissiveStrengthExtension {\n\n\tconstructor( parser ) {\n\n\t\tthis.parser = parser;\n\t\tthis.name = EXTENSIONS.KHR_MATERIALS_EMISSIVE_STRENGTH;\n\n\t}\n\n\textendMaterialParams( materialIndex, materialParams ) {\n\n\t\tconst parser = this.parser;\n\t\tconst materialDef = parser.json.materials[ materialIndex ];\n\n\t\tif ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) {\n\n\t\t\treturn Promise.resolve();\n\n\t\t}\n\n\t\tconst emissiveStrength = materialDef.extensions[ this.name ].emissiveStrength;\n\n\t\tif ( emissiveStrength !== undefined ) {\n\n\t\t\tmaterialParams.emissiveIntensity = emissiveStrength;\n\n\t\t}\n\n\t\treturn Promise.resolve();\n\n\t}\n\n}\n\n/**\n * Clearcoat Materials Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_clearcoat\n *\n * @private\n */\nclass GLTFMaterialsClearcoatExtension {\n\n\tconstructor( parser ) {\n\n\t\tthis.parser = parser;\n\t\tthis.name = EXTENSIONS.KHR_MATERIALS_CLEARCOAT;\n\n\t}\n\n\tgetMaterialType( materialIndex ) {\n\n\t\tconst parser = this.parser;\n\t\tconst materialDef = parser.json.materials[ materialIndex ];\n\n\t\tif ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) return null;\n\n\t\treturn MeshPhysicalMaterial;\n\n\t}\n\n\textendMaterialParams( materialIndex, materialParams ) {\n\n\t\tconst parser = this.parser;\n\t\tconst materialDef = parser.json.materials[ materialIndex ];\n\n\t\tif ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) {\n\n\t\t\treturn Promise.resolve();\n\n\t\t}\n\n\t\tconst pending = [];\n\n\t\tconst extension = materialDef.extensions[ this.name ];\n\n\t\tif ( extension.clearcoatFactor !== undefined ) {\n\n\t\t\tmaterialParams.clearcoat = extension.clearcoatFactor;\n\n\t\t}\n\n\t\tif ( extension.clearcoatTexture !== undefined ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'clearcoatMap', extension.clearcoatTexture ) );\n\n\t\t}\n\n\t\tif ( extension.clearcoatRoughnessFactor !== undefined ) {\n\n\t\t\tmaterialParams.clearcoatRoughness = extension.clearcoatRoughnessFactor;\n\n\t\t}\n\n\t\tif ( extension.clearcoatRoughnessTexture !== undefined ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'clearcoatRoughnessMap', extension.clearcoatRoughnessTexture ) );\n\n\t\t}\n\n\t\tif ( extension.clearcoatNormalTexture !== undefined ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'clearcoatNormalMap', extension.clearcoatNormalTexture ) );\n\n\t\t\tif ( extension.clearcoatNormalTexture.scale !== undefined ) {\n\n\t\t\t\tconst scale = extension.clearcoatNormalTexture.scale;\n\n\t\t\t\tmaterialParams.clearcoatNormalScale = new Vector2( scale, scale );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn Promise.all( pending );\n\n\t}\n\n}\n\n/**\n * Materials dispersion Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/main/extensions/2.0/Khronos/KHR_materials_dispersion\n *\n * @private\n */\nclass GLTFMaterialsDispersionExtension {\n\n\tconstructor( parser ) {\n\n\t\tthis.parser = parser;\n\t\tthis.name = EXTENSIONS.KHR_MATERIALS_DISPERSION;\n\n\t}\n\n\tgetMaterialType( materialIndex ) {\n\n\t\tconst parser = this.parser;\n\t\tconst materialDef = parser.json.materials[ materialIndex ];\n\n\t\tif ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) return null;\n\n\t\treturn MeshPhysicalMaterial;\n\n\t}\n\n\textendMaterialParams( materialIndex, materialParams ) {\n\n\t\tconst parser = this.parser;\n\t\tconst materialDef = parser.json.materials[ materialIndex ];\n\n\t\tif ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) {\n\n\t\t\treturn Promise.resolve();\n\n\t\t}\n\n\t\tconst extension = materialDef.extensions[ this.name ];\n\n\t\tmaterialParams.dispersion = extension.dispersion !== undefined ? extension.dispersion : 0;\n\n\t\treturn Promise.resolve();\n\n\t}\n\n}\n\n/**\n * Iridescence Materials Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_iridescence\n *\n * @private\n */\nclass GLTFMaterialsIridescenceExtension {\n\n\tconstructor( parser ) {\n\n\t\tthis.parser = parser;\n\t\tthis.name = EXTENSIONS.KHR_MATERIALS_IRIDESCENCE;\n\n\t}\n\n\tgetMaterialType( materialIndex ) {\n\n\t\tconst parser = this.parser;\n\t\tconst materialDef = parser.json.materials[ materialIndex ];\n\n\t\tif ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) return null;\n\n\t\treturn MeshPhysicalMaterial;\n\n\t}\n\n\textendMaterialParams( materialIndex, materialParams ) {\n\n\t\tconst parser = this.parser;\n\t\tconst materialDef = parser.json.materials[ materialIndex ];\n\n\t\tif ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) {\n\n\t\t\treturn Promise.resolve();\n\n\t\t}\n\n\t\tconst pending = [];\n\n\t\tconst extension = materialDef.extensions[ this.name ];\n\n\t\tif ( extension.iridescenceFactor !== undefined ) {\n\n\t\t\tmaterialParams.iridescence = extension.iridescenceFactor;\n\n\t\t}\n\n\t\tif ( extension.iridescenceTexture !== undefined ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'iridescenceMap', extension.iridescenceTexture ) );\n\n\t\t}\n\n\t\tif ( extension.iridescenceIor !== undefined ) {\n\n\t\t\tmaterialParams.iridescenceIOR = extension.iridescenceIor;\n\n\t\t}\n\n\t\tif ( materialParams.iridescenceThicknessRange === undefined ) {\n\n\t\t\tmaterialParams.iridescenceThicknessRange = [ 100, 400 ];\n\n\t\t}\n\n\t\tif ( extension.iridescenceThicknessMinimum !== undefined ) {\n\n\t\t\tmaterialParams.iridescenceThicknessRange[ 0 ] = extension.iridescenceThicknessMinimum;\n\n\t\t}\n\n\t\tif ( extension.iridescenceThicknessMaximum !== undefined ) {\n\n\t\t\tmaterialParams.iridescenceThicknessRange[ 1 ] = extension.iridescenceThicknessMaximum;\n\n\t\t}\n\n\t\tif ( extension.iridescenceThicknessTexture !== undefined ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'iridescenceThicknessMap', extension.iridescenceThicknessTexture ) );\n\n\t\t}\n\n\t\treturn Promise.all( pending );\n\n\t}\n\n}\n\n/**\n * Sheen Materials Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/main/extensions/2.0/Khronos/KHR_materials_sheen\n *\n * @private\n */\nclass GLTFMaterialsSheenExtension {\n\n\tconstructor( parser ) {\n\n\t\tthis.parser = parser;\n\t\tthis.name = EXTENSIONS.KHR_MATERIALS_SHEEN;\n\n\t}\n\n\tgetMaterialType( materialIndex ) {\n\n\t\tconst parser = this.parser;\n\t\tconst materialDef = parser.json.materials[ materialIndex ];\n\n\t\tif ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) return null;\n\n\t\treturn MeshPhysicalMaterial;\n\n\t}\n\n\textendMaterialParams( materialIndex, materialParams ) {\n\n\t\tconst parser = this.parser;\n\t\tconst materialDef = parser.json.materials[ materialIndex ];\n\n\t\tif ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) {\n\n\t\t\treturn Promise.resolve();\n\n\t\t}\n\n\t\tconst pending = [];\n\n\t\tmaterialParams.sheenColor = new Color( 0, 0, 0 );\n\t\tmaterialParams.sheenRoughness = 0;\n\t\tmaterialParams.sheen = 1;\n\n\t\tconst extension = materialDef.extensions[ this.name ];\n\n\t\tif ( extension.sheenColorFactor !== undefined ) {\n\n\t\t\tconst colorFactor = extension.sheenColorFactor;\n\t\t\tmaterialParams.sheenColor.setRGB( colorFactor[ 0 ], colorFactor[ 1 ], colorFactor[ 2 ], LinearSRGBColorSpace );\n\n\t\t}\n\n\t\tif ( extension.sheenRoughnessFactor !== undefined ) {\n\n\t\t\tmaterialParams.sheenRoughness = extension.sheenRoughnessFactor;\n\n\t\t}\n\n\t\tif ( extension.sheenColorTexture !== undefined ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'sheenColorMap', extension.sheenColorTexture, SRGBColorSpace ) );\n\n\t\t}\n\n\t\tif ( extension.sheenRoughnessTexture !== undefined ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'sheenRoughnessMap', extension.sheenRoughnessTexture ) );\n\n\t\t}\n\n\t\treturn Promise.all( pending );\n\n\t}\n\n}\n\n/**\n * Transmission Materials Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_transmission\n * Draft: https://github.com/KhronosGroup/glTF/pull/1698\n *\n * @private\n */\nclass GLTFMaterialsTransmissionExtension {\n\n\tconstructor( parser ) {\n\n\t\tthis.parser = parser;\n\t\tthis.name = EXTENSIONS.KHR_MATERIALS_TRANSMISSION;\n\n\t}\n\n\tgetMaterialType( materialIndex ) {\n\n\t\tconst parser = this.parser;\n\t\tconst materialDef = parser.json.materials[ materialIndex ];\n\n\t\tif ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) return null;\n\n\t\treturn MeshPhysicalMaterial;\n\n\t}\n\n\textendMaterialParams( materialIndex, materialParams ) {\n\n\t\tconst parser = this.parser;\n\t\tconst materialDef = parser.json.materials[ materialIndex ];\n\n\t\tif ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) {\n\n\t\t\treturn Promise.resolve();\n\n\t\t}\n\n\t\tconst pending = [];\n\n\t\tconst extension = materialDef.extensions[ this.name ];\n\n\t\tif ( extension.transmissionFactor !== undefined ) {\n\n\t\t\tmaterialParams.transmission = extension.transmissionFactor;\n\n\t\t}\n\n\t\tif ( extension.transmissionTexture !== undefined ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'transmissionMap', extension.transmissionTexture ) );\n\n\t\t}\n\n\t\treturn Promise.all( pending );\n\n\t}\n\n}\n\n/**\n * Materials Volume Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_volume\n *\n * @private\n */\nclass GLTFMaterialsVolumeExtension {\n\n\tconstructor( parser ) {\n\n\t\tthis.parser = parser;\n\t\tthis.name = EXTENSIONS.KHR_MATERIALS_VOLUME;\n\n\t}\n\n\tgetMaterialType( materialIndex ) {\n\n\t\tconst parser = this.parser;\n\t\tconst materialDef = parser.json.materials[ materialIndex ];\n\n\t\tif ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) return null;\n\n\t\treturn MeshPhysicalMaterial;\n\n\t}\n\n\textendMaterialParams( materialIndex, materialParams ) {\n\n\t\tconst parser = this.parser;\n\t\tconst materialDef = parser.json.materials[ materialIndex ];\n\n\t\tif ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) {\n\n\t\t\treturn Promise.resolve();\n\n\t\t}\n\n\t\tconst pending = [];\n\n\t\tconst extension = materialDef.extensions[ this.name ];\n\n\t\tmaterialParams.thickness = extension.thicknessFactor !== undefined ? extension.thicknessFactor : 0;\n\n\t\tif ( extension.thicknessTexture !== undefined ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'thicknessMap', extension.thicknessTexture ) );\n\n\t\t}\n\n\t\tmaterialParams.attenuationDistance = extension.attenuationDistance || Infinity;\n\n\t\tconst colorArray = extension.attenuationColor || [ 1, 1, 1 ];\n\t\tmaterialParams.attenuationColor = new Color().setRGB( colorArray[ 0 ], colorArray[ 1 ], colorArray[ 2 ], LinearSRGBColorSpace );\n\n\t\treturn Promise.all( pending );\n\n\t}\n\n}\n\n/**\n * Materials ior Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_ior\n *\n * @private\n */\nclass GLTFMaterialsIorExtension {\n\n\tconstructor( parser ) {\n\n\t\tthis.parser = parser;\n\t\tthis.name = EXTENSIONS.KHR_MATERIALS_IOR;\n\n\t}\n\n\tgetMaterialType( materialIndex ) {\n\n\t\tconst parser = this.parser;\n\t\tconst materialDef = parser.json.materials[ materialIndex ];\n\n\t\tif ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) return null;\n\n\t\treturn MeshPhysicalMaterial;\n\n\t}\n\n\textendMaterialParams( materialIndex, materialParams ) {\n\n\t\tconst parser = this.parser;\n\t\tconst materialDef = parser.json.materials[ materialIndex ];\n\n\t\tif ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) {\n\n\t\t\treturn Promise.resolve();\n\n\t\t}\n\n\t\tconst extension = materialDef.extensions[ this.name ];\n\n\t\tmaterialParams.ior = extension.ior !== undefined ? extension.ior : 1.5;\n\n\t\treturn Promise.resolve();\n\n\t}\n\n}\n\n/**\n * Materials specular Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_specular\n *\n * @private\n */\nclass GLTFMaterialsSpecularExtension {\n\n\tconstructor( parser ) {\n\n\t\tthis.parser = parser;\n\t\tthis.name = EXTENSIONS.KHR_MATERIALS_SPECULAR;\n\n\t}\n\n\tgetMaterialType( materialIndex ) {\n\n\t\tconst parser = this.parser;\n\t\tconst materialDef = parser.json.materials[ materialIndex ];\n\n\t\tif ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) return null;\n\n\t\treturn MeshPhysicalMaterial;\n\n\t}\n\n\textendMaterialParams( materialIndex, materialParams ) {\n\n\t\tconst parser = this.parser;\n\t\tconst materialDef = parser.json.materials[ materialIndex ];\n\n\t\tif ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) {\n\n\t\t\treturn Promise.resolve();\n\n\t\t}\n\n\t\tconst pending = [];\n\n\t\tconst extension = materialDef.extensions[ this.name ];\n\n\t\tmaterialParams.specularIntensity = extension.specularFactor !== undefined ? extension.specularFactor : 1.0;\n\n\t\tif ( extension.specularTexture !== undefined ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'specularIntensityMap', extension.specularTexture ) );\n\n\t\t}\n\n\t\tconst colorArray = extension.specularColorFactor || [ 1, 1, 1 ];\n\t\tmaterialParams.specularColor = new Color().setRGB( colorArray[ 0 ], colorArray[ 1 ], colorArray[ 2 ], LinearSRGBColorSpace );\n\n\t\tif ( extension.specularColorTexture !== undefined ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'specularColorMap', extension.specularColorTexture, SRGBColorSpace ) );\n\n\t\t}\n\n\t\treturn Promise.all( pending );\n\n\t}\n\n}\n\n\n/**\n * Materials bump Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/EXT_materials_bump\n *\n * @private\n */\nclass GLTFMaterialsBumpExtension {\n\n\tconstructor( parser ) {\n\n\t\tthis.parser = parser;\n\t\tthis.name = EXTENSIONS.EXT_MATERIALS_BUMP;\n\n\t}\n\n\tgetMaterialType( materialIndex ) {\n\n\t\tconst parser = this.parser;\n\t\tconst materialDef = parser.json.materials[ materialIndex ];\n\n\t\tif ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) return null;\n\n\t\treturn MeshPhysicalMaterial;\n\n\t}\n\n\textendMaterialParams( materialIndex, materialParams ) {\n\n\t\tconst parser = this.parser;\n\t\tconst materialDef = parser.json.materials[ materialIndex ];\n\n\t\tif ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) {\n\n\t\t\treturn Promise.resolve();\n\n\t\t}\n\n\t\tconst pending = [];\n\n\t\tconst extension = materialDef.extensions[ this.name ];\n\n\t\tmaterialParams.bumpScale = extension.bumpFactor !== undefined ? extension.bumpFactor : 1.0;\n\n\t\tif ( extension.bumpTexture !== undefined ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'bumpMap', extension.bumpTexture ) );\n\n\t\t}\n\n\t\treturn Promise.all( pending );\n\n\t}\n\n}\n\n/**\n * Materials anisotropy Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_anisotropy\n *\n * @private\n */\nclass GLTFMaterialsAnisotropyExtension {\n\n\tconstructor( parser ) {\n\n\t\tthis.parser = parser;\n\t\tthis.name = EXTENSIONS.KHR_MATERIALS_ANISOTROPY;\n\n\t}\n\n\tgetMaterialType( materialIndex ) {\n\n\t\tconst parser = this.parser;\n\t\tconst materialDef = parser.json.materials[ materialIndex ];\n\n\t\tif ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) return null;\n\n\t\treturn MeshPhysicalMaterial;\n\n\t}\n\n\textendMaterialParams( materialIndex, materialParams ) {\n\n\t\tconst parser = this.parser;\n\t\tconst materialDef = parser.json.materials[ materialIndex ];\n\n\t\tif ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) {\n\n\t\t\treturn Promise.resolve();\n\n\t\t}\n\n\t\tconst pending = [];\n\n\t\tconst extension = materialDef.extensions[ this.name ];\n\n\t\tif ( extension.anisotropyStrength !== undefined ) {\n\n\t\t\tmaterialParams.anisotropy = extension.anisotropyStrength;\n\n\t\t}\n\n\t\tif ( extension.anisotropyRotation !== undefined ) {\n\n\t\t\tmaterialParams.anisotropyRotation = extension.anisotropyRotation;\n\n\t\t}\n\n\t\tif ( extension.anisotropyTexture !== undefined ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'anisotropyMap', extension.anisotropyTexture ) );\n\n\t\t}\n\n\t\treturn Promise.all( pending );\n\n\t}\n\n}\n\n/**\n * BasisU Texture Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_texture_basisu\n *\n * @private\n */\nclass GLTFTextureBasisUExtension {\n\n\tconstructor( parser ) {\n\n\t\tthis.parser = parser;\n\t\tthis.name = EXTENSIONS.KHR_TEXTURE_BASISU;\n\n\t}\n\n\tloadTexture( textureIndex ) {\n\n\t\tconst parser = this.parser;\n\t\tconst json = parser.json;\n\n\t\tconst textureDef = json.textures[ textureIndex ];\n\n\t\tif ( ! textureDef.extensions || ! textureDef.extensions[ this.name ] ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst extension = textureDef.extensions[ this.name ];\n\t\tconst loader = parser.options.ktx2Loader;\n\n\t\tif ( ! loader ) {\n\n\t\t\tif ( json.extensionsRequired && json.extensionsRequired.indexOf( this.name ) >= 0 ) {\n\n\t\t\t\tthrow new Error( 'THREE.GLTFLoader: setKTX2Loader must be called before loading KTX2 textures' );\n\n\t\t\t} else {\n\n\t\t\t\t// Assumes that the extension is optional and that a fallback texture is present\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn parser.loadTextureImage( textureIndex, extension.source, loader );\n\n\t}\n\n}\n\n/**\n * WebP Texture Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Vendor/EXT_texture_webp\n *\n * @private\n */\nclass GLTFTextureWebPExtension {\n\n\tconstructor( parser ) {\n\n\t\tthis.parser = parser;\n\t\tthis.name = EXTENSIONS.EXT_TEXTURE_WEBP;\n\n\t}\n\n\tloadTexture( textureIndex ) {\n\n\t\tconst name = this.name;\n\t\tconst parser = this.parser;\n\t\tconst json = parser.json;\n\n\t\tconst textureDef = json.textures[ textureIndex ];\n\n\t\tif ( ! textureDef.extensions || ! textureDef.extensions[ name ] ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst extension = textureDef.extensions[ name ];\n\t\tconst source = json.images[ extension.source ];\n\n\t\tlet loader = parser.textureLoader;\n\t\tif ( source.uri ) {\n\n\t\t\tconst handler = parser.options.manager.getHandler( source.uri );\n\t\t\tif ( handler !== null ) loader = handler;\n\n\t\t}\n\n\t\treturn parser.loadTextureImage( textureIndex, extension.source, loader );\n\n\t}\n\n}\n\n/**\n * AVIF Texture Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Vendor/EXT_texture_avif\n *\n * @private\n */\nclass GLTFTextureAVIFExtension {\n\n\tconstructor( parser ) {\n\n\t\tthis.parser = parser;\n\t\tthis.name = EXTENSIONS.EXT_TEXTURE_AVIF;\n\n\t}\n\n\tloadTexture( textureIndex ) {\n\n\t\tconst name = this.name;\n\t\tconst parser = this.parser;\n\t\tconst json = parser.json;\n\n\t\tconst textureDef = json.textures[ textureIndex ];\n\n\t\tif ( ! textureDef.extensions || ! textureDef.extensions[ name ] ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst extension = textureDef.extensions[ name ];\n\t\tconst source = json.images[ extension.source ];\n\n\t\tlet loader = parser.textureLoader;\n\t\tif ( source.uri ) {\n\n\t\t\tconst handler = parser.options.manager.getHandler( source.uri );\n\t\t\tif ( handler !== null ) loader = handler;\n\n\t\t}\n\n\t\treturn parser.loadTextureImage( textureIndex, extension.source, loader );\n\n\t}\n\n}\n\n/**\n * meshopt BufferView Compression Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Vendor/EXT_meshopt_compression\n *\n * @private\n */\nclass GLTFMeshoptCompression {\n\n\tconstructor( parser ) {\n\n\t\tthis.name = EXTENSIONS.EXT_MESHOPT_COMPRESSION;\n\t\tthis.parser = parser;\n\n\t}\n\n\tloadBufferView( index ) {\n\n\t\tconst json = this.parser.json;\n\t\tconst bufferView = json.bufferViews[ index ];\n\n\t\tif ( bufferView.extensions && bufferView.extensions[ this.name ] ) {\n\n\t\t\tconst extensionDef = bufferView.extensions[ this.name ];\n\n\t\t\tconst buffer = this.parser.getDependency( 'buffer', extensionDef.buffer );\n\t\t\tconst decoder = this.parser.options.meshoptDecoder;\n\n\t\t\tif ( ! decoder || ! decoder.supported ) {\n\n\t\t\t\tif ( json.extensionsRequired && json.extensionsRequired.indexOf( this.name ) >= 0 ) {\n\n\t\t\t\t\tthrow new Error( 'THREE.GLTFLoader: setMeshoptDecoder must be called before loading compressed files' );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// Assumes that the extension is optional and that fallback buffer data is present\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn buffer.then( function ( res ) {\n\n\t\t\t\tconst byteOffset = extensionDef.byteOffset || 0;\n\t\t\t\tconst byteLength = extensionDef.byteLength || 0;\n\n\t\t\t\tconst count = extensionDef.count;\n\t\t\t\tconst stride = extensionDef.byteStride;\n\n\t\t\t\tconst source = new Uint8Array( res, byteOffset, byteLength );\n\n\t\t\t\tif ( decoder.decodeGltfBufferAsync ) {\n\n\t\t\t\t\treturn decoder.decodeGltfBufferAsync( count, stride, source, extensionDef.mode, extensionDef.filter ).then( function ( res ) {\n\n\t\t\t\t\t\treturn res.buffer;\n\n\t\t\t\t\t} );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// Support for MeshoptDecoder 0.18 or earlier, without decodeGltfBufferAsync\n\t\t\t\t\treturn decoder.ready.then( function () {\n\n\t\t\t\t\t\tconst result = new ArrayBuffer( count * stride );\n\t\t\t\t\t\tdecoder.decodeGltfBuffer( new Uint8Array( result ), count, stride, source, extensionDef.mode, extensionDef.filter );\n\t\t\t\t\t\treturn result;\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t} else {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * GPU Instancing Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Vendor/EXT_mesh_gpu_instancing\n *\n * @private\n */\nclass GLTFMeshGpuInstancing {\n\n\tconstructor( parser ) {\n\n\t\tthis.name = EXTENSIONS.EXT_MESH_GPU_INSTANCING;\n\t\tthis.parser = parser;\n\n\t}\n\n\tcreateNodeMesh( nodeIndex ) {\n\n\t\tconst json = this.parser.json;\n\t\tconst nodeDef = json.nodes[ nodeIndex ];\n\n\t\tif ( ! nodeDef.extensions || ! nodeDef.extensions[ this.name ] ||\n\t\t\tnodeDef.mesh === undefined ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst meshDef = json.meshes[ nodeDef.mesh ];\n\n\t\t// No Points or Lines + Instancing support yet\n\n\t\tfor ( const primitive of meshDef.primitives ) {\n\n\t\t\tif ( primitive.mode !== WEBGL_CONSTANTS.TRIANGLES &&\n\t\t\t\t primitive.mode !== WEBGL_CONSTANTS.TRIANGLE_STRIP &&\n\t\t\t\t primitive.mode !== WEBGL_CONSTANTS.TRIANGLE_FAN &&\n\t\t\t\t primitive.mode !== undefined ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst extensionDef = nodeDef.extensions[ this.name ];\n\t\tconst attributesDef = extensionDef.attributes;\n\n\t\t// @TODO: Can we support InstancedMesh + SkinnedMesh?\n\n\t\tconst pending = [];\n\t\tconst attributes = {};\n\n\t\tfor ( const key in attributesDef ) {\n\n\t\t\tpending.push( this.parser.getDependency( 'accessor', attributesDef[ key ] ).then( accessor => {\n\n\t\t\t\tattributes[ key ] = accessor;\n\t\t\t\treturn attributes[ key ];\n\n\t\t\t} ) );\n\n\t\t}\n\n\t\tif ( pending.length < 1 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tpending.push( this.parser.createNodeMesh( nodeIndex ) );\n\n\t\treturn Promise.all( pending ).then( results => {\n\n\t\t\tconst nodeObject = results.pop();\n\t\t\tconst meshes = nodeObject.isGroup ? nodeObject.children : [ nodeObject ];\n\t\t\tconst count = results[ 0 ].count; // All attribute counts should be same\n\t\t\tconst instancedMeshes = [];\n\n\t\t\tfor ( const mesh of meshes ) {\n\n\t\t\t\t// Temporal variables\n\t\t\t\tconst m = new Matrix4();\n\t\t\t\tconst p = new Vector3();\n\t\t\t\tconst q = new Quaternion();\n\t\t\t\tconst s = new Vector3( 1, 1, 1 );\n\n\t\t\t\tconst instancedMesh = new InstancedMesh( mesh.geometry, mesh.material, count );\n\n\t\t\t\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\t\t\t\tif ( attributes.TRANSLATION ) {\n\n\t\t\t\t\t\tp.fromBufferAttribute( attributes.TRANSLATION, i );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( attributes.ROTATION ) {\n\n\t\t\t\t\t\tq.fromBufferAttribute( attributes.ROTATION, i );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( attributes.SCALE ) {\n\n\t\t\t\t\t\ts.fromBufferAttribute( attributes.SCALE, i );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tinstancedMesh.setMatrixAt( i, m.compose( p, q, s ) );\n\n\t\t\t\t}\n\n\t\t\t\t// Add instance attributes to the geometry, excluding TRS.\n\t\t\t\tfor ( const attributeName in attributes ) {\n\n\t\t\t\t\tif ( attributeName === '_COLOR_0' ) {\n\n\t\t\t\t\t\tconst attr = attributes[ attributeName ];\n\t\t\t\t\t\tinstancedMesh.instanceColor = new InstancedBufferAttribute( attr.array, attr.itemSize, attr.normalized );\n\n\t\t\t\t\t} else if ( attributeName !== 'TRANSLATION' &&\n\t\t\t\t\t\t attributeName !== 'ROTATION' &&\n\t\t\t\t\t\t attributeName !== 'SCALE' ) {\n\n\t\t\t\t\t\tmesh.geometry.setAttribute( attributeName, attributes[ attributeName ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// Just in case\n\t\t\t\tObject3D.prototype.copy.call( instancedMesh, mesh );\n\n\t\t\t\tthis.parser.assignFinalMaterial( instancedMesh );\n\n\t\t\t\tinstancedMeshes.push( instancedMesh );\n\n\t\t\t}\n\n\t\t\tif ( nodeObject.isGroup ) {\n\n\t\t\t\tnodeObject.clear();\n\n\t\t\t\tnodeObject.add( ... instancedMeshes );\n\n\t\t\t\treturn nodeObject;\n\n\t\t\t}\n\n\t\t\treturn instancedMeshes[ 0 ];\n\n\t\t} );\n\n\t}\n\n}\n\n/* BINARY EXTENSION */\nconst BINARY_EXTENSION_HEADER_MAGIC = 'glTF';\nconst BINARY_EXTENSION_HEADER_LENGTH = 12;\nconst BINARY_EXTENSION_CHUNK_TYPES = { JSON: 0x4E4F534A, BIN: 0x004E4942 };\n\nclass GLTFBinaryExtension {\n\n\tconstructor( data ) {\n\n\t\tthis.name = EXTENSIONS.KHR_BINARY_GLTF;\n\t\tthis.content = null;\n\t\tthis.body = null;\n\n\t\tconst headerView = new DataView( data, 0, BINARY_EXTENSION_HEADER_LENGTH );\n\t\tconst textDecoder = new TextDecoder();\n\n\t\tthis.header = {\n\t\t\tmagic: textDecoder.decode( new Uint8Array( data.slice( 0, 4 ) ) ),\n\t\t\tversion: headerView.getUint32( 4, true ),\n\t\t\tlength: headerView.getUint32( 8, true )\n\t\t};\n\n\t\tif ( this.header.magic !== BINARY_EXTENSION_HEADER_MAGIC ) {\n\n\t\t\tthrow new Error( 'THREE.GLTFLoader: Unsupported glTF-Binary header.' );\n\n\t\t} else if ( this.header.version < 2.0 ) {\n\n\t\t\tthrow new Error( 'THREE.GLTFLoader: Legacy binary file detected.' );\n\n\t\t}\n\n\t\tconst chunkContentsLength = this.header.length - BINARY_EXTENSION_HEADER_LENGTH;\n\t\tconst chunkView = new DataView( data, BINARY_EXTENSION_HEADER_LENGTH );\n\t\tlet chunkIndex = 0;\n\n\t\twhile ( chunkIndex < chunkContentsLength ) {\n\n\t\t\tconst chunkLength = chunkView.getUint32( chunkIndex, true );\n\t\t\tchunkIndex += 4;\n\n\t\t\tconst chunkType = chunkView.getUint32( chunkIndex, true );\n\t\t\tchunkIndex += 4;\n\n\t\t\tif ( chunkType === BINARY_EXTENSION_CHUNK_TYPES.JSON ) {\n\n\t\t\t\tconst contentArray = new Uint8Array( data, BINARY_EXTENSION_HEADER_LENGTH + chunkIndex, chunkLength );\n\t\t\t\tthis.content = textDecoder.decode( contentArray );\n\n\t\t\t} else if ( chunkType === BINARY_EXTENSION_CHUNK_TYPES.BIN ) {\n\n\t\t\t\tconst byteOffset = BINARY_EXTENSION_HEADER_LENGTH + chunkIndex;\n\t\t\t\tthis.body = data.slice( byteOffset, byteOffset + chunkLength );\n\n\t\t\t}\n\n\t\t\t// Clients must ignore chunks with unknown types.\n\n\t\t\tchunkIndex += chunkLength;\n\n\t\t}\n\n\t\tif ( this.content === null ) {\n\n\t\t\tthrow new Error( 'THREE.GLTFLoader: JSON content not found.' );\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * DRACO Mesh Compression Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_draco_mesh_compression\n *\n * @private\n */\nclass GLTFDracoMeshCompressionExtension {\n\n\tconstructor( json, dracoLoader ) {\n\n\t\tif ( ! dracoLoader ) {\n\n\t\t\tthrow new Error( 'THREE.GLTFLoader: No DRACOLoader instance provided.' );\n\n\t\t}\n\n\t\tthis.name = EXTENSIONS.KHR_DRACO_MESH_COMPRESSION;\n\t\tthis.json = json;\n\t\tthis.dracoLoader = dracoLoader;\n\t\tthis.dracoLoader.preload();\n\n\t}\n\n\tdecodePrimitive( primitive, parser ) {\n\n\t\tconst json = this.json;\n\t\tconst dracoLoader = this.dracoLoader;\n\t\tconst bufferViewIndex = primitive.extensions[ this.name ].bufferView;\n\t\tconst gltfAttributeMap = primitive.extensions[ this.name ].attributes;\n\t\tconst threeAttributeMap = {};\n\t\tconst attributeNormalizedMap = {};\n\t\tconst attributeTypeMap = {};\n\n\t\tfor ( const attributeName in gltfAttributeMap ) {\n\n\t\t\tconst threeAttributeName = ATTRIBUTES[ attributeName ] || attributeName.toLowerCase();\n\n\t\t\tthreeAttributeMap[ threeAttributeName ] = gltfAttributeMap[ attributeName ];\n\n\t\t}\n\n\t\tfor ( const attributeName in primitive.attributes ) {\n\n\t\t\tconst threeAttributeName = ATTRIBUTES[ attributeName ] || attributeName.toLowerCase();\n\n\t\t\tif ( gltfAttributeMap[ attributeName ] !== undefined ) {\n\n\t\t\t\tconst accessorDef = json.accessors[ primitive.attributes[ attributeName ] ];\n\t\t\t\tconst componentType = WEBGL_COMPONENT_TYPES[ accessorDef.componentType ];\n\n\t\t\t\tattributeTypeMap[ threeAttributeName ] = componentType.name;\n\t\t\t\tattributeNormalizedMap[ threeAttributeName ] = accessorDef.normalized === true;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn parser.getDependency( 'bufferView', bufferViewIndex ).then( function ( bufferView ) {\n\n\t\t\treturn new Promise( function ( resolve, reject ) {\n\n\t\t\t\tdracoLoader.decodeDracoFile( bufferView, function ( geometry ) {\n\n\t\t\t\t\tfor ( const attributeName in geometry.attributes ) {\n\n\t\t\t\t\t\tconst attribute = geometry.attributes[ attributeName ];\n\t\t\t\t\t\tconst normalized = attributeNormalizedMap[ attributeName ];\n\n\t\t\t\t\t\tif ( normalized !== undefined ) attribute.normalized = normalized;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tresolve( geometry );\n\n\t\t\t\t}, threeAttributeMap, attributeTypeMap, LinearSRGBColorSpace, reject );\n\n\t\t\t} );\n\n\t\t} );\n\n\t}\n\n}\n\n/**\n * Texture Transform Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_texture_transform\n *\n * @private\n */\nclass GLTFTextureTransformExtension {\n\n\tconstructor() {\n\n\t\tthis.name = EXTENSIONS.KHR_TEXTURE_TRANSFORM;\n\n\t}\n\n\textendTexture( texture, transform ) {\n\n\t\tif ( ( transform.texCoord === undefined || transform.texCoord === texture.channel )\n\t\t\t&& transform.offset === undefined\n\t\t\t&& transform.rotation === undefined\n\t\t\t&& transform.scale === undefined ) {\n\n\t\t\t// See https://github.com/mrdoob/three.js/issues/21819.\n\t\t\treturn texture;\n\n\t\t}\n\n\t\ttexture = texture.clone();\n\n\t\tif ( transform.texCoord !== undefined ) {\n\n\t\t\ttexture.channel = transform.texCoord;\n\n\t\t}\n\n\t\tif ( transform.offset !== undefined ) {\n\n\t\t\ttexture.offset.fromArray( transform.offset );\n\n\t\t}\n\n\t\tif ( transform.rotation !== undefined ) {\n\n\t\t\ttexture.rotation = transform.rotation;\n\n\t\t}\n\n\t\tif ( transform.scale !== undefined ) {\n\n\t\t\ttexture.repeat.fromArray( transform.scale );\n\n\t\t}\n\n\t\ttexture.needsUpdate = true;\n\n\t\treturn texture;\n\n\t}\n\n}\n\n/**\n * Mesh Quantization Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_mesh_quantization\n *\n * @private\n */\nclass GLTFMeshQuantizationExtension {\n\n\tconstructor() {\n\n\t\tthis.name = EXTENSIONS.KHR_MESH_QUANTIZATION;\n\n\t}\n\n}\n\n/*********************************/\n/********** INTERPOLATION ********/\n/*********************************/\n\n// Spline Interpolation\n// Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#appendix-c-spline-interpolation\nclass GLTFCubicSplineInterpolant extends Interpolant {\n\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tsuper( parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tcopySampleValue_( index ) {\n\n\t\t// Copies a sample value to the result buffer. See description of glTF\n\t\t// CUBICSPLINE values layout in interpolate_() function below.\n\n\t\tconst result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tvalueSize = this.valueSize,\n\t\t\toffset = index * valueSize * 3 + valueSize;\n\n\t\tfor ( let i = 0; i !== valueSize; i ++ ) {\n\n\t\t\tresult[ i ] = values[ offset + i ];\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\tinterpolate_( i1, t0, t, t1 ) {\n\n\t\tconst result = this.resultBuffer;\n\t\tconst values = this.sampleValues;\n\t\tconst stride = this.valueSize;\n\n\t\tconst stride2 = stride * 2;\n\t\tconst stride3 = stride * 3;\n\n\t\tconst td = t1 - t0;\n\n\t\tconst p = ( t - t0 ) / td;\n\t\tconst pp = p * p;\n\t\tconst ppp = pp * p;\n\n\t\tconst offset1 = i1 * stride3;\n\t\tconst offset0 = offset1 - stride3;\n\n\t\tconst s2 = - 2 * ppp + 3 * pp;\n\t\tconst s3 = ppp - pp;\n\t\tconst s0 = 1 - s2;\n\t\tconst s1 = s3 - pp + p;\n\n\t\t// Layout of keyframe output values for CUBICSPLINE animations:\n\t\t//   [ inTangent_1, splineVertex_1, outTangent_1, inTangent_2, splineVertex_2, ... ]\n\t\tfor ( let i = 0; i !== stride; i ++ ) {\n\n\t\t\tconst p0 = values[ offset0 + i + stride ]; // splineVertex_k\n\t\t\tconst m0 = values[ offset0 + i + stride2 ] * td; // outTangent_k * (t_k+1 - t_k)\n\t\t\tconst p1 = values[ offset1 + i + stride ]; // splineVertex_k+1\n\t\t\tconst m1 = values[ offset1 + i ] * td; // inTangent_k+1 * (t_k+1 - t_k)\n\n\t\t\tresult[ i ] = s0 * p0 + s1 * m0 + s2 * p1 + s3 * m1;\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n}\n\nconst _quaternion = new Quaternion();\n\nclass GLTFCubicSplineQuaternionInterpolant extends GLTFCubicSplineInterpolant {\n\n\tinterpolate_( i1, t0, t, t1 ) {\n\n\t\tconst result = super.interpolate_( i1, t0, t, t1 );\n\n\t\t_quaternion.fromArray( result ).normalize().toArray( result );\n\n\t\treturn result;\n\n\t}\n\n}\n\n\n/*********************************/\n/********** INTERNALS ************/\n/*********************************/\n\n/* CONSTANTS */\n\nconst WEBGL_CONSTANTS = {\n\tFLOAT: 5126,\n\t//FLOAT_MAT2: 35674,\n\tFLOAT_MAT3: 35675,\n\tFLOAT_MAT4: 35676,\n\tFLOAT_VEC2: 35664,\n\tFLOAT_VEC3: 35665,\n\tFLOAT_VEC4: 35666,\n\tLINEAR: 9729,\n\tREPEAT: 10497,\n\tSAMPLER_2D: 35678,\n\tPOINTS: 0,\n\tLINES: 1,\n\tLINE_LOOP: 2,\n\tLINE_STRIP: 3,\n\tTRIANGLES: 4,\n\tTRIANGLE_STRIP: 5,\n\tTRIANGLE_FAN: 6,\n\tUNSIGNED_BYTE: 5121,\n\tUNSIGNED_SHORT: 5123\n};\n\nconst WEBGL_COMPONENT_TYPES = {\n\t5120: Int8Array,\n\t5121: Uint8Array,\n\t5122: Int16Array,\n\t5123: Uint16Array,\n\t5125: Uint32Array,\n\t5126: Float32Array\n};\n\nconst WEBGL_FILTERS = {\n\t9728: NearestFilter,\n\t9729: LinearFilter,\n\t9984: NearestMipmapNearestFilter,\n\t9985: LinearMipmapNearestFilter,\n\t9986: NearestMipmapLinearFilter,\n\t9987: LinearMipmapLinearFilter\n};\n\nconst WEBGL_WRAPPINGS = {\n\t33071: ClampToEdgeWrapping,\n\t33648: MirroredRepeatWrapping,\n\t10497: RepeatWrapping\n};\n\nconst WEBGL_TYPE_SIZES = {\n\t'SCALAR': 1,\n\t'VEC2': 2,\n\t'VEC3': 3,\n\t'VEC4': 4,\n\t'MAT2': 4,\n\t'MAT3': 9,\n\t'MAT4': 16\n};\n\nconst ATTRIBUTES = {\n\tPOSITION: 'position',\n\tNORMAL: 'normal',\n\tTANGENT: 'tangent',\n\tTEXCOORD_0: 'uv',\n\tTEXCOORD_1: 'uv1',\n\tTEXCOORD_2: 'uv2',\n\tTEXCOORD_3: 'uv3',\n\tCOLOR_0: 'color',\n\tWEIGHTS_0: 'skinWeight',\n\tJOINTS_0: 'skinIndex',\n};\n\nconst PATH_PROPERTIES = {\n\tscale: 'scale',\n\ttranslation: 'position',\n\trotation: 'quaternion',\n\tweights: 'morphTargetInfluences'\n};\n\nconst INTERPOLATION = {\n\tCUBICSPLINE: undefined, // We use a custom interpolant (GLTFCubicSplineInterpolation) for CUBICSPLINE tracks. Each\n\t\t                        // keyframe track will be initialized with a default interpolation type, then modified.\n\tLINEAR: InterpolateLinear,\n\tSTEP: InterpolateDiscrete\n};\n\nconst ALPHA_MODES = {\n\tOPAQUE: 'OPAQUE',\n\tMASK: 'MASK',\n\tBLEND: 'BLEND'\n};\n\n/**\n * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#default-material\n *\n * @private\n * @param {Object<string, Material>} cache\n * @return {Material}\n */\nfunction createDefaultMaterial( cache ) {\n\n\tif ( cache[ 'DefaultMaterial' ] === undefined ) {\n\n\t\tcache[ 'DefaultMaterial' ] = new MeshStandardMaterial( {\n\t\t\tcolor: 0xFFFFFF,\n\t\t\temissive: 0x000000,\n\t\t\tmetalness: 1,\n\t\t\troughness: 1,\n\t\t\ttransparent: false,\n\t\t\tdepthTest: true,\n\t\t\tside: FrontSide\n\t\t} );\n\n\t}\n\n\treturn cache[ 'DefaultMaterial' ];\n\n}\n\nfunction addUnknownExtensionsToUserData( knownExtensions, object, objectDef ) {\n\n\t// Add unknown glTF extensions to an object's userData.\n\n\tfor ( const name in objectDef.extensions ) {\n\n\t\tif ( knownExtensions[ name ] === undefined ) {\n\n\t\t\tobject.userData.gltfExtensions = object.userData.gltfExtensions || {};\n\t\t\tobject.userData.gltfExtensions[ name ] = objectDef.extensions[ name ];\n\n\t\t}\n\n\t}\n\n}\n\n/**\n *\n * @private\n * @param {Object3D|Material|BufferGeometry|Object} object\n * @param {GLTF.definition} gltfDef\n */\nfunction assignExtrasToUserData( object, gltfDef ) {\n\n\tif ( gltfDef.extras !== undefined ) {\n\n\t\tif ( typeof gltfDef.extras === 'object' ) {\n\n\t\t\tObject.assign( object.userData, gltfDef.extras );\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.GLTFLoader: Ignoring primitive type .extras, ' + gltfDef.extras );\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#morph-targets\n *\n * @private\n * @param {BufferGeometry} geometry\n * @param {Array<GLTF.Target>} targets\n * @param {GLTFParser} parser\n * @return {Promise<BufferGeometry>}\n */\nfunction addMorphTargets( geometry, targets, parser ) {\n\n\tlet hasMorphPosition = false;\n\tlet hasMorphNormal = false;\n\tlet hasMorphColor = false;\n\n\tfor ( let i = 0, il = targets.length; i < il; i ++ ) {\n\n\t\tconst target = targets[ i ];\n\n\t\tif ( target.POSITION !== undefined ) hasMorphPosition = true;\n\t\tif ( target.NORMAL !== undefined ) hasMorphNormal = true;\n\t\tif ( target.COLOR_0 !== undefined ) hasMorphColor = true;\n\n\t\tif ( hasMorphPosition && hasMorphNormal && hasMorphColor ) break;\n\n\t}\n\n\tif ( ! hasMorphPosition && ! hasMorphNormal && ! hasMorphColor ) return Promise.resolve( geometry );\n\n\tconst pendingPositionAccessors = [];\n\tconst pendingNormalAccessors = [];\n\tconst pendingColorAccessors = [];\n\n\tfor ( let i = 0, il = targets.length; i < il; i ++ ) {\n\n\t\tconst target = targets[ i ];\n\n\t\tif ( hasMorphPosition ) {\n\n\t\t\tconst pendingAccessor = target.POSITION !== undefined\n\t\t\t\t? parser.getDependency( 'accessor', target.POSITION )\n\t\t\t\t: geometry.attributes.position;\n\n\t\t\tpendingPositionAccessors.push( pendingAccessor );\n\n\t\t}\n\n\t\tif ( hasMorphNormal ) {\n\n\t\t\tconst pendingAccessor = target.NORMAL !== undefined\n\t\t\t\t? parser.getDependency( 'accessor', target.NORMAL )\n\t\t\t\t: geometry.attributes.normal;\n\n\t\t\tpendingNormalAccessors.push( pendingAccessor );\n\n\t\t}\n\n\t\tif ( hasMorphColor ) {\n\n\t\t\tconst pendingAccessor = target.COLOR_0 !== undefined\n\t\t\t\t? parser.getDependency( 'accessor', target.COLOR_0 )\n\t\t\t\t: geometry.attributes.color;\n\n\t\t\tpendingColorAccessors.push( pendingAccessor );\n\n\t\t}\n\n\t}\n\n\treturn Promise.all( [\n\t\tPromise.all( pendingPositionAccessors ),\n\t\tPromise.all( pendingNormalAccessors ),\n\t\tPromise.all( pendingColorAccessors )\n\t] ).then( function ( accessors ) {\n\n\t\tconst morphPositions = accessors[ 0 ];\n\t\tconst morphNormals = accessors[ 1 ];\n\t\tconst morphColors = accessors[ 2 ];\n\n\t\tif ( hasMorphPosition ) geometry.morphAttributes.position = morphPositions;\n\t\tif ( hasMorphNormal ) geometry.morphAttributes.normal = morphNormals;\n\t\tif ( hasMorphColor ) geometry.morphAttributes.color = morphColors;\n\t\tgeometry.morphTargetsRelative = true;\n\n\t\treturn geometry;\n\n\t} );\n\n}\n\n/**\n *\n * @private\n * @param {Mesh} mesh\n * @param {GLTF.Mesh} meshDef\n */\nfunction updateMorphTargets( mesh, meshDef ) {\n\n\tmesh.updateMorphTargets();\n\n\tif ( meshDef.weights !== undefined ) {\n\n\t\tfor ( let i = 0, il = meshDef.weights.length; i < il; i ++ ) {\n\n\t\t\tmesh.morphTargetInfluences[ i ] = meshDef.weights[ i ];\n\n\t\t}\n\n\t}\n\n\t// .extras has user-defined data, so check that .extras.targetNames is an array.\n\tif ( meshDef.extras && Array.isArray( meshDef.extras.targetNames ) ) {\n\n\t\tconst targetNames = meshDef.extras.targetNames;\n\n\t\tif ( mesh.morphTargetInfluences.length === targetNames.length ) {\n\n\t\t\tmesh.morphTargetDictionary = {};\n\n\t\t\tfor ( let i = 0, il = targetNames.length; i < il; i ++ ) {\n\n\t\t\t\tmesh.morphTargetDictionary[ targetNames[ i ] ] = i;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.GLTFLoader: Invalid extras.targetNames length. Ignoring names.' );\n\n\t\t}\n\n\t}\n\n}\n\nfunction createPrimitiveKey( primitiveDef ) {\n\n\tlet geometryKey;\n\n\tconst dracoExtension = primitiveDef.extensions && primitiveDef.extensions[ EXTENSIONS.KHR_DRACO_MESH_COMPRESSION ];\n\n\tif ( dracoExtension ) {\n\n\t\tgeometryKey = 'draco:' + dracoExtension.bufferView\n\t\t\t\t+ ':' + dracoExtension.indices\n\t\t\t\t+ ':' + createAttributesKey( dracoExtension.attributes );\n\n\t} else {\n\n\t\tgeometryKey = primitiveDef.indices + ':' + createAttributesKey( primitiveDef.attributes ) + ':' + primitiveDef.mode;\n\n\t}\n\n\tif ( primitiveDef.targets !== undefined ) {\n\n\t\tfor ( let i = 0, il = primitiveDef.targets.length; i < il; i ++ ) {\n\n\t\t\tgeometryKey += ':' + createAttributesKey( primitiveDef.targets[ i ] );\n\n\t\t}\n\n\t}\n\n\treturn geometryKey;\n\n}\n\nfunction createAttributesKey( attributes ) {\n\n\tlet attributesKey = '';\n\n\tconst keys = Object.keys( attributes ).sort();\n\n\tfor ( let i = 0, il = keys.length; i < il; i ++ ) {\n\n\t\tattributesKey += keys[ i ] + ':' + attributes[ keys[ i ] ] + ';';\n\n\t}\n\n\treturn attributesKey;\n\n}\n\nfunction getNormalizedComponentScale( constructor ) {\n\n\t// Reference:\n\t// https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_mesh_quantization#encoding-quantized-data\n\n\tswitch ( constructor ) {\n\n\t\tcase Int8Array:\n\t\t\treturn 1 / 127;\n\n\t\tcase Uint8Array:\n\t\t\treturn 1 / 255;\n\n\t\tcase Int16Array:\n\t\t\treturn 1 / 32767;\n\n\t\tcase Uint16Array:\n\t\t\treturn 1 / 65535;\n\n\t\tdefault:\n\t\t\tthrow new Error( 'THREE.GLTFLoader: Unsupported normalized accessor component type.' );\n\n\t}\n\n}\n\nfunction getImageURIMimeType( uri ) {\n\n\tif ( uri.search( /\\.jpe?g($|\\?)/i ) > 0 || uri.search( /^data\\:image\\/jpeg/ ) === 0 ) return 'image/jpeg';\n\tif ( uri.search( /\\.webp($|\\?)/i ) > 0 || uri.search( /^data\\:image\\/webp/ ) === 0 ) return 'image/webp';\n\tif ( uri.search( /\\.ktx2($|\\?)/i ) > 0 || uri.search( /^data\\:image\\/ktx2/ ) === 0 ) return 'image/ktx2';\n\n\treturn 'image/png';\n\n}\n\nconst _identityMatrix = new Matrix4();\n\n/* GLTF PARSER */\n\nclass GLTFParser {\n\n\tconstructor( json = {}, options = {} ) {\n\n\t\tthis.json = json;\n\t\tthis.extensions = {};\n\t\tthis.plugins = {};\n\t\tthis.options = options;\n\n\t\t// loader object cache\n\t\tthis.cache = new GLTFRegistry();\n\n\t\t// associations between Three.js objects and glTF elements\n\t\tthis.associations = new Map();\n\n\t\t// BufferGeometry caching\n\t\tthis.primitiveCache = {};\n\n\t\t// Node cache\n\t\tthis.nodeCache = {};\n\n\t\t// Object3D instance caches\n\t\tthis.meshCache = { refs: {}, uses: {} };\n\t\tthis.cameraCache = { refs: {}, uses: {} };\n\t\tthis.lightCache = { refs: {}, uses: {} };\n\n\t\tthis.sourceCache = {};\n\t\tthis.textureCache = {};\n\n\t\t// Track node names, to ensure no duplicates\n\t\tthis.nodeNamesUsed = {};\n\n\t\t// Use an ImageBitmapLoader if imageBitmaps are supported. Moves much of the\n\t\t// expensive work of uploading a texture to the GPU off the main thread.\n\n\t\tlet isSafari = false;\n\t\tlet safariVersion = - 1;\n\t\tlet isFirefox = false;\n\t\tlet firefoxVersion = - 1;\n\n\t\tif ( typeof navigator !== 'undefined' ) {\n\n\t\t\tconst userAgent = navigator.userAgent;\n\n\t\t\tisSafari = /^((?!chrome|android).)*safari/i.test( userAgent ) === true;\n\t\t\tconst safariMatch = userAgent.match( /Version\\/(\\d+)/ );\n\t\t\tsafariVersion = isSafari && safariMatch ? parseInt( safariMatch[ 1 ], 10 ) : - 1;\n\n\t\t\tisFirefox = userAgent.indexOf( 'Firefox' ) > - 1;\n\t\t\tfirefoxVersion = isFirefox ? userAgent.match( /Firefox\\/([0-9]+)\\./ )[ 1 ] : - 1;\n\n\t\t}\n\n\t\tif ( typeof createImageBitmap === 'undefined' || ( isSafari && safariVersion < 17 ) || ( isFirefox && firefoxVersion < 98 ) ) {\n\n\t\t\tthis.textureLoader = new TextureLoader( this.options.manager );\n\n\t\t} else {\n\n\t\t\tthis.textureLoader = new ImageBitmapLoader( this.options.manager );\n\n\t\t}\n\n\t\tthis.textureLoader.setCrossOrigin( this.options.crossOrigin );\n\t\tthis.textureLoader.setRequestHeader( this.options.requestHeader );\n\n\t\tthis.fileLoader = new FileLoader( this.options.manager );\n\t\tthis.fileLoader.setResponseType( 'arraybuffer' );\n\n\t\tif ( this.options.crossOrigin === 'use-credentials' ) {\n\n\t\t\tthis.fileLoader.setWithCredentials( true );\n\n\t\t}\n\n\t}\n\n\tsetExtensions( extensions ) {\n\n\t\tthis.extensions = extensions;\n\n\t}\n\n\tsetPlugins( plugins ) {\n\n\t\tthis.plugins = plugins;\n\n\t}\n\n\tparse( onLoad, onError ) {\n\n\t\tconst parser = this;\n\t\tconst json = this.json;\n\t\tconst extensions = this.extensions;\n\n\t\t// Clear the loader cache\n\t\tthis.cache.removeAll();\n\t\tthis.nodeCache = {};\n\n\t\t// Mark the special nodes/meshes in json for efficient parse\n\t\tthis._invokeAll( function ( ext ) {\n\n\t\t\treturn ext._markDefs && ext._markDefs();\n\n\t\t} );\n\n\t\tPromise.all( this._invokeAll( function ( ext ) {\n\n\t\t\treturn ext.beforeRoot && ext.beforeRoot();\n\n\t\t} ) ).then( function () {\n\n\t\t\treturn Promise.all( [\n\n\t\t\t\tparser.getDependencies( 'scene' ),\n\t\t\t\tparser.getDependencies( 'animation' ),\n\t\t\t\tparser.getDependencies( 'camera' ),\n\n\t\t\t] );\n\n\t\t} ).then( function ( dependencies ) {\n\n\t\t\tconst result = {\n\t\t\t\tscene: dependencies[ 0 ][ json.scene || 0 ],\n\t\t\t\tscenes: dependencies[ 0 ],\n\t\t\t\tanimations: dependencies[ 1 ],\n\t\t\t\tcameras: dependencies[ 2 ],\n\t\t\t\tasset: json.asset,\n\t\t\t\tparser: parser,\n\t\t\t\tuserData: {}\n\t\t\t};\n\n\t\t\taddUnknownExtensionsToUserData( extensions, result, json );\n\n\t\t\tassignExtrasToUserData( result, json );\n\n\t\t\treturn Promise.all( parser._invokeAll( function ( ext ) {\n\n\t\t\t\treturn ext.afterRoot && ext.afterRoot( result );\n\n\t\t\t} ) ).then( function () {\n\n\t\t\t\tfor ( const scene of result.scenes ) {\n\n\t\t\t\t\tscene.updateMatrixWorld();\n\n\t\t\t\t}\n\n\t\t\t\tonLoad( result );\n\n\t\t\t} );\n\n\t\t} ).catch( onError );\n\n\t}\n\n\t/**\n\t * Marks the special nodes/meshes in json for efficient parse.\n\t *\n\t * @private\n\t */\n\t_markDefs() {\n\n\t\tconst nodeDefs = this.json.nodes || [];\n\t\tconst skinDefs = this.json.skins || [];\n\t\tconst meshDefs = this.json.meshes || [];\n\n\t\t// Nothing in the node definition indicates whether it is a Bone or an\n\t\t// Object3D. Use the skins' joint references to mark bones.\n\t\tfor ( let skinIndex = 0, skinLength = skinDefs.length; skinIndex < skinLength; skinIndex ++ ) {\n\n\t\t\tconst joints = skinDefs[ skinIndex ].joints;\n\n\t\t\tfor ( let i = 0, il = joints.length; i < il; i ++ ) {\n\n\t\t\t\tnodeDefs[ joints[ i ] ].isBone = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Iterate over all nodes, marking references to shared resources,\n\t\t// as well as skeleton joints.\n\t\tfor ( let nodeIndex = 0, nodeLength = nodeDefs.length; nodeIndex < nodeLength; nodeIndex ++ ) {\n\n\t\t\tconst nodeDef = nodeDefs[ nodeIndex ];\n\n\t\t\tif ( nodeDef.mesh !== undefined ) {\n\n\t\t\t\tthis._addNodeRef( this.meshCache, nodeDef.mesh );\n\n\t\t\t\t// Nothing in the mesh definition indicates whether it is\n\t\t\t\t// a SkinnedMesh or Mesh. Use the node's mesh reference\n\t\t\t\t// to mark SkinnedMesh if node has skin.\n\t\t\t\tif ( nodeDef.skin !== undefined ) {\n\n\t\t\t\t\tmeshDefs[ nodeDef.mesh ].isSkinnedMesh = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( nodeDef.camera !== undefined ) {\n\n\t\t\t\tthis._addNodeRef( this.cameraCache, nodeDef.camera );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Counts references to shared node / Object3D resources. These resources\n\t * can be reused, or \"instantiated\", at multiple nodes in the scene\n\t * hierarchy. Mesh, Camera, and Light instances are instantiated and must\n\t * be marked. Non-scenegraph resources (like Materials, Geometries, and\n\t * Textures) can be reused directly and are not marked here.\n\t *\n\t * Example: CesiumMilkTruck sample model reuses \"Wheel\" meshes.\n\t *\n\t * @private\n\t * @param {Object} cache\n\t * @param {Object3D} index\n\t */\n\t_addNodeRef( cache, index ) {\n\n\t\tif ( index === undefined ) return;\n\n\t\tif ( cache.refs[ index ] === undefined ) {\n\n\t\t\tcache.refs[ index ] = cache.uses[ index ] = 0;\n\n\t\t}\n\n\t\tcache.refs[ index ] ++;\n\n\t}\n\n\t/**\n\t * Returns a reference to a shared resource, cloning it if necessary.\n\t *\n\t * @private\n\t * @param {Object} cache\n\t * @param {number} index\n\t * @param {Object} object\n\t * @return {Object}\n\t */\n\t_getNodeRef( cache, index, object ) {\n\n\t\tif ( cache.refs[ index ] <= 1 ) return object;\n\n\t\tconst ref = object.clone();\n\n\t\t// Propagates mappings to the cloned object, prevents mappings on the\n\t\t// original object from being lost.\n\t\tconst updateMappings = ( original, clone ) => {\n\n\t\t\tconst mappings = this.associations.get( original );\n\t\t\tif ( mappings != null ) {\n\n\t\t\t\tthis.associations.set( clone, mappings );\n\n\t\t\t}\n\n\t\t\tfor ( const [ i, child ] of original.children.entries() ) {\n\n\t\t\t\tupdateMappings( child, clone.children[ i ] );\n\n\t\t\t}\n\n\t\t};\n\n\t\tupdateMappings( object, ref );\n\n\t\tref.name += '_instance_' + ( cache.uses[ index ] ++ );\n\n\t\treturn ref;\n\n\t}\n\n\t_invokeOne( func ) {\n\n\t\tconst extensions = Object.values( this.plugins );\n\t\textensions.push( this );\n\n\t\tfor ( let i = 0; i < extensions.length; i ++ ) {\n\n\t\t\tconst result = func( extensions[ i ] );\n\n\t\t\tif ( result ) return result;\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\t_invokeAll( func ) {\n\n\t\tconst extensions = Object.values( this.plugins );\n\t\textensions.unshift( this );\n\n\t\tconst pending = [];\n\n\t\tfor ( let i = 0; i < extensions.length; i ++ ) {\n\n\t\t\tconst result = func( extensions[ i ] );\n\n\t\t\tif ( result ) pending.push( result );\n\n\t\t}\n\n\t\treturn pending;\n\n\t}\n\n\t/**\n\t * Requests the specified dependency asynchronously, with caching.\n\t *\n\t * @private\n\t * @param {string} type\n\t * @param {number} index\n\t * @return {Promise<Object3D|Material|THREE.Texture|AnimationClip|ArrayBuffer|Object>}\n\t */\n\tgetDependency( type, index ) {\n\n\t\tconst cacheKey = type + ':' + index;\n\t\tlet dependency = this.cache.get( cacheKey );\n\n\t\tif ( ! dependency ) {\n\n\t\t\tswitch ( type ) {\n\n\t\t\t\tcase 'scene':\n\t\t\t\t\tdependency = this.loadScene( index );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'node':\n\t\t\t\t\tdependency = this._invokeOne( function ( ext ) {\n\n\t\t\t\t\t\treturn ext.loadNode && ext.loadNode( index );\n\n\t\t\t\t\t} );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'mesh':\n\t\t\t\t\tdependency = this._invokeOne( function ( ext ) {\n\n\t\t\t\t\t\treturn ext.loadMesh && ext.loadMesh( index );\n\n\t\t\t\t\t} );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'accessor':\n\t\t\t\t\tdependency = this.loadAccessor( index );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'bufferView':\n\t\t\t\t\tdependency = this._invokeOne( function ( ext ) {\n\n\t\t\t\t\t\treturn ext.loadBufferView && ext.loadBufferView( index );\n\n\t\t\t\t\t} );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'buffer':\n\t\t\t\t\tdependency = this.loadBuffer( index );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'material':\n\t\t\t\t\tdependency = this._invokeOne( function ( ext ) {\n\n\t\t\t\t\t\treturn ext.loadMaterial && ext.loadMaterial( index );\n\n\t\t\t\t\t} );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'texture':\n\t\t\t\t\tdependency = this._invokeOne( function ( ext ) {\n\n\t\t\t\t\t\treturn ext.loadTexture && ext.loadTexture( index );\n\n\t\t\t\t\t} );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'skin':\n\t\t\t\t\tdependency = this.loadSkin( index );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'animation':\n\t\t\t\t\tdependency = this._invokeOne( function ( ext ) {\n\n\t\t\t\t\t\treturn ext.loadAnimation && ext.loadAnimation( index );\n\n\t\t\t\t\t} );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'camera':\n\t\t\t\t\tdependency = this.loadCamera( index );\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tdependency = this._invokeOne( function ( ext ) {\n\n\t\t\t\t\t\treturn ext != this && ext.getDependency && ext.getDependency( type, index );\n\n\t\t\t\t\t} );\n\n\t\t\t\t\tif ( ! dependency ) {\n\n\t\t\t\t\t\tthrow new Error( 'Unknown type: ' + type );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tthis.cache.add( cacheKey, dependency );\n\n\t\t}\n\n\t\treturn dependency;\n\n\t}\n\n\t/**\n\t * Requests all dependencies of the specified type asynchronously, with caching.\n\t *\n\t * @private\n\t * @param {string} type\n\t * @return {Promise<Array<Object>>}\n\t */\n\tgetDependencies( type ) {\n\n\t\tlet dependencies = this.cache.get( type );\n\n\t\tif ( ! dependencies ) {\n\n\t\t\tconst parser = this;\n\t\t\tconst defs = this.json[ type + ( type === 'mesh' ? 'es' : 's' ) ] || [];\n\n\t\t\tdependencies = Promise.all( defs.map( function ( def, index ) {\n\n\t\t\t\treturn parser.getDependency( type, index );\n\n\t\t\t} ) );\n\n\t\t\tthis.cache.add( type, dependencies );\n\n\t\t}\n\n\t\treturn dependencies;\n\n\t}\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#buffers-and-buffer-views\n\t *\n\t * @private\n\t * @param {number} bufferIndex\n\t * @return {Promise<ArrayBuffer>}\n\t */\n\tloadBuffer( bufferIndex ) {\n\n\t\tconst bufferDef = this.json.buffers[ bufferIndex ];\n\t\tconst loader = this.fileLoader;\n\n\t\tif ( bufferDef.type && bufferDef.type !== 'arraybuffer' ) {\n\n\t\t\tthrow new Error( 'THREE.GLTFLoader: ' + bufferDef.type + ' buffer type is not supported.' );\n\n\t\t}\n\n\t\t// If present, GLB container is required to be the first buffer.\n\t\tif ( bufferDef.uri === undefined && bufferIndex === 0 ) {\n\n\t\t\treturn Promise.resolve( this.extensions[ EXTENSIONS.KHR_BINARY_GLTF ].body );\n\n\t\t}\n\n\t\tconst options = this.options;\n\n\t\treturn new Promise( function ( resolve, reject ) {\n\n\t\t\tloader.load( LoaderUtils.resolveURL( bufferDef.uri, options.path ), resolve, undefined, function () {\n\n\t\t\t\treject( new Error( 'THREE.GLTFLoader: Failed to load buffer \"' + bufferDef.uri + '\".' ) );\n\n\t\t\t} );\n\n\t\t} );\n\n\t}\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#buffers-and-buffer-views\n\t *\n\t * @private\n\t * @param {number} bufferViewIndex\n\t * @return {Promise<ArrayBuffer>}\n\t */\n\tloadBufferView( bufferViewIndex ) {\n\n\t\tconst bufferViewDef = this.json.bufferViews[ bufferViewIndex ];\n\n\t\treturn this.getDependency( 'buffer', bufferViewDef.buffer ).then( function ( buffer ) {\n\n\t\t\tconst byteLength = bufferViewDef.byteLength || 0;\n\t\t\tconst byteOffset = bufferViewDef.byteOffset || 0;\n\t\t\treturn buffer.slice( byteOffset, byteOffset + byteLength );\n\n\t\t} );\n\n\t}\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#accessors\n\t *\n\t * @private\n\t * @param {number} accessorIndex\n\t * @return {Promise<BufferAttribute|InterleavedBufferAttribute>}\n\t */\n\tloadAccessor( accessorIndex ) {\n\n\t\tconst parser = this;\n\t\tconst json = this.json;\n\n\t\tconst accessorDef = this.json.accessors[ accessorIndex ];\n\n\t\tif ( accessorDef.bufferView === undefined && accessorDef.sparse === undefined ) {\n\n\t\t\tconst itemSize = WEBGL_TYPE_SIZES[ accessorDef.type ];\n\t\t\tconst TypedArray = WEBGL_COMPONENT_TYPES[ accessorDef.componentType ];\n\t\t\tconst normalized = accessorDef.normalized === true;\n\n\t\t\tconst array = new TypedArray( accessorDef.count * itemSize );\n\t\t\treturn Promise.resolve( new BufferAttribute( array, itemSize, normalized ) );\n\n\t\t}\n\n\t\tconst pendingBufferViews = [];\n\n\t\tif ( accessorDef.bufferView !== undefined ) {\n\n\t\t\tpendingBufferViews.push( this.getDependency( 'bufferView', accessorDef.bufferView ) );\n\n\t\t} else {\n\n\t\t\tpendingBufferViews.push( null );\n\n\t\t}\n\n\t\tif ( accessorDef.sparse !== undefined ) {\n\n\t\t\tpendingBufferViews.push( this.getDependency( 'bufferView', accessorDef.sparse.indices.bufferView ) );\n\t\t\tpendingBufferViews.push( this.getDependency( 'bufferView', accessorDef.sparse.values.bufferView ) );\n\n\t\t}\n\n\t\treturn Promise.all( pendingBufferViews ).then( function ( bufferViews ) {\n\n\t\t\tconst bufferView = bufferViews[ 0 ];\n\n\t\t\tconst itemSize = WEBGL_TYPE_SIZES[ accessorDef.type ];\n\t\t\tconst TypedArray = WEBGL_COMPONENT_TYPES[ accessorDef.componentType ];\n\n\t\t\t// For VEC3: itemSize is 3, elementBytes is 4, itemBytes is 12.\n\t\t\tconst elementBytes = TypedArray.BYTES_PER_ELEMENT;\n\t\t\tconst itemBytes = elementBytes * itemSize;\n\t\t\tconst byteOffset = accessorDef.byteOffset || 0;\n\t\t\tconst byteStride = accessorDef.bufferView !== undefined ? json.bufferViews[ accessorDef.bufferView ].byteStride : undefined;\n\t\t\tconst normalized = accessorDef.normalized === true;\n\t\t\tlet array, bufferAttribute;\n\n\t\t\t// The buffer is not interleaved if the stride is the item size in bytes.\n\t\t\tif ( byteStride && byteStride !== itemBytes ) {\n\n\t\t\t\t// Each \"slice\" of the buffer, as defined by 'count' elements of 'byteStride' bytes, gets its own InterleavedBuffer\n\t\t\t\t// This makes sure that IBA.count reflects accessor.count properly\n\t\t\t\tconst ibSlice = Math.floor( byteOffset / byteStride );\n\t\t\t\tconst ibCacheKey = 'InterleavedBuffer:' + accessorDef.bufferView + ':' + accessorDef.componentType + ':' + ibSlice + ':' + accessorDef.count;\n\t\t\t\tlet ib = parser.cache.get( ibCacheKey );\n\n\t\t\t\tif ( ! ib ) {\n\n\t\t\t\t\tarray = new TypedArray( bufferView, ibSlice * byteStride, accessorDef.count * byteStride / elementBytes );\n\n\t\t\t\t\t// Integer parameters to IB/IBA are in array elements, not bytes.\n\t\t\t\t\tib = new InterleavedBuffer( array, byteStride / elementBytes );\n\n\t\t\t\t\tparser.cache.add( ibCacheKey, ib );\n\n\t\t\t\t}\n\n\t\t\t\tbufferAttribute = new InterleavedBufferAttribute( ib, itemSize, ( byteOffset % byteStride ) / elementBytes, normalized );\n\n\t\t\t} else {\n\n\t\t\t\tif ( bufferView === null ) {\n\n\t\t\t\t\tarray = new TypedArray( accessorDef.count * itemSize );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tarray = new TypedArray( bufferView, byteOffset, accessorDef.count * itemSize );\n\n\t\t\t\t}\n\n\t\t\t\tbufferAttribute = new BufferAttribute( array, itemSize, normalized );\n\n\t\t\t}\n\n\t\t\t// https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#sparse-accessors\n\t\t\tif ( accessorDef.sparse !== undefined ) {\n\n\t\t\t\tconst itemSizeIndices = WEBGL_TYPE_SIZES.SCALAR;\n\t\t\t\tconst TypedArrayIndices = WEBGL_COMPONENT_TYPES[ accessorDef.sparse.indices.componentType ];\n\n\t\t\t\tconst byteOffsetIndices = accessorDef.sparse.indices.byteOffset || 0;\n\t\t\t\tconst byteOffsetValues = accessorDef.sparse.values.byteOffset || 0;\n\n\t\t\t\tconst sparseIndices = new TypedArrayIndices( bufferViews[ 1 ], byteOffsetIndices, accessorDef.sparse.count * itemSizeIndices );\n\t\t\t\tconst sparseValues = new TypedArray( bufferViews[ 2 ], byteOffsetValues, accessorDef.sparse.count * itemSize );\n\n\t\t\t\tif ( bufferView !== null ) {\n\n\t\t\t\t\t// Avoid modifying the original ArrayBuffer, if the bufferView wasn't initialized with zeroes.\n\t\t\t\t\tbufferAttribute = new BufferAttribute( bufferAttribute.array.slice(), bufferAttribute.itemSize, bufferAttribute.normalized );\n\n\t\t\t\t}\n\n\t\t\t\t// Ignore normalized since we copy from sparse\n\t\t\t\tbufferAttribute.normalized = false;\n\n\t\t\t\tfor ( let i = 0, il = sparseIndices.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst index = sparseIndices[ i ];\n\n\t\t\t\t\tbufferAttribute.setX( index, sparseValues[ i * itemSize ] );\n\t\t\t\t\tif ( itemSize >= 2 ) bufferAttribute.setY( index, sparseValues[ i * itemSize + 1 ] );\n\t\t\t\t\tif ( itemSize >= 3 ) bufferAttribute.setZ( index, sparseValues[ i * itemSize + 2 ] );\n\t\t\t\t\tif ( itemSize >= 4 ) bufferAttribute.setW( index, sparseValues[ i * itemSize + 3 ] );\n\t\t\t\t\tif ( itemSize >= 5 ) throw new Error( 'THREE.GLTFLoader: Unsupported itemSize in sparse BufferAttribute.' );\n\n\t\t\t\t}\n\n\t\t\t\tbufferAttribute.normalized = normalized;\n\n\t\t\t}\n\n\t\t\treturn bufferAttribute;\n\n\t\t} );\n\n\t}\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#textures\n\t *\n\t * @private\n\t * @param {number} textureIndex\n\t * @return {Promise<THREE.Texture|null>}\n\t */\n\tloadTexture( textureIndex ) {\n\n\t\tconst json = this.json;\n\t\tconst options = this.options;\n\t\tconst textureDef = json.textures[ textureIndex ];\n\t\tconst sourceIndex = textureDef.source;\n\t\tconst sourceDef = json.images[ sourceIndex ];\n\n\t\tlet loader = this.textureLoader;\n\n\t\tif ( sourceDef.uri ) {\n\n\t\t\tconst handler = options.manager.getHandler( sourceDef.uri );\n\t\t\tif ( handler !== null ) loader = handler;\n\n\t\t}\n\n\t\treturn this.loadTextureImage( textureIndex, sourceIndex, loader );\n\n\t}\n\n\tloadTextureImage( textureIndex, sourceIndex, loader ) {\n\n\t\tconst parser = this;\n\t\tconst json = this.json;\n\n\t\tconst textureDef = json.textures[ textureIndex ];\n\t\tconst sourceDef = json.images[ sourceIndex ];\n\n\t\tconst cacheKey = ( sourceDef.uri || sourceDef.bufferView ) + ':' + textureDef.sampler;\n\n\t\tif ( this.textureCache[ cacheKey ] ) {\n\n\t\t\t// See https://github.com/mrdoob/three.js/issues/21559.\n\t\t\treturn this.textureCache[ cacheKey ];\n\n\t\t}\n\n\t\tconst promise = this.loadImageSource( sourceIndex, loader ).then( function ( texture ) {\n\n\t\t\ttexture.flipY = false;\n\n\t\t\ttexture.name = textureDef.name || sourceDef.name || '';\n\n\t\t\tif ( texture.name === '' && typeof sourceDef.uri === 'string' && sourceDef.uri.startsWith( 'data:image/' ) === false ) {\n\n\t\t\t\ttexture.name = sourceDef.uri;\n\n\t\t\t}\n\n\t\t\tconst samplers = json.samplers || {};\n\t\t\tconst sampler = samplers[ textureDef.sampler ] || {};\n\n\t\t\ttexture.magFilter = WEBGL_FILTERS[ sampler.magFilter ] || LinearFilter;\n\t\t\ttexture.minFilter = WEBGL_FILTERS[ sampler.minFilter ] || LinearMipmapLinearFilter;\n\t\t\ttexture.wrapS = WEBGL_WRAPPINGS[ sampler.wrapS ] || RepeatWrapping;\n\t\t\ttexture.wrapT = WEBGL_WRAPPINGS[ sampler.wrapT ] || RepeatWrapping;\n\t\t\ttexture.generateMipmaps = ! texture.isCompressedTexture && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n\n\t\t\tparser.associations.set( texture, { textures: textureIndex } );\n\n\t\t\treturn texture;\n\n\t\t} ).catch( function () {\n\n\t\t\treturn null;\n\n\t\t} );\n\n\t\tthis.textureCache[ cacheKey ] = promise;\n\n\t\treturn promise;\n\n\t}\n\n\tloadImageSource( sourceIndex, loader ) {\n\n\t\tconst parser = this;\n\t\tconst json = this.json;\n\t\tconst options = this.options;\n\n\t\tif ( this.sourceCache[ sourceIndex ] !== undefined ) {\n\n\t\t\treturn this.sourceCache[ sourceIndex ].then( ( texture ) => texture.clone() );\n\n\t\t}\n\n\t\tconst sourceDef = json.images[ sourceIndex ];\n\n\t\tconst URL = self.URL || self.webkitURL;\n\n\t\tlet sourceURI = sourceDef.uri || '';\n\t\tlet isObjectURL = false;\n\n\t\tif ( sourceDef.bufferView !== undefined ) {\n\n\t\t\t// Load binary image data from bufferView, if provided.\n\n\t\t\tsourceURI = parser.getDependency( 'bufferView', sourceDef.bufferView ).then( function ( bufferView ) {\n\n\t\t\t\tisObjectURL = true;\n\t\t\t\tconst blob = new Blob( [ bufferView ], { type: sourceDef.mimeType } );\n\t\t\t\tsourceURI = URL.createObjectURL( blob );\n\t\t\t\treturn sourceURI;\n\n\t\t\t} );\n\n\t\t} else if ( sourceDef.uri === undefined ) {\n\n\t\t\tthrow new Error( 'THREE.GLTFLoader: Image ' + sourceIndex + ' is missing URI and bufferView' );\n\n\t\t}\n\n\t\tconst promise = Promise.resolve( sourceURI ).then( function ( sourceURI ) {\n\n\t\t\treturn new Promise( function ( resolve, reject ) {\n\n\t\t\t\tlet onLoad = resolve;\n\n\t\t\t\tif ( loader.isImageBitmapLoader === true ) {\n\n\t\t\t\t\tonLoad = function ( imageBitmap ) {\n\n\t\t\t\t\t\tconst texture = new Texture( imageBitmap );\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\t\tresolve( texture );\n\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t\tloader.load( LoaderUtils.resolveURL( sourceURI, options.path ), onLoad, undefined, reject );\n\n\t\t\t} );\n\n\t\t} ).then( function ( texture ) {\n\n\t\t\t// Clean up resources and configure Texture.\n\n\t\t\tif ( isObjectURL === true ) {\n\n\t\t\t\tURL.revokeObjectURL( sourceURI );\n\n\t\t\t}\n\n\t\t\tassignExtrasToUserData( texture, sourceDef );\n\n\t\t\ttexture.userData.mimeType = sourceDef.mimeType || getImageURIMimeType( sourceDef.uri );\n\n\t\t\treturn texture;\n\n\t\t} ).catch( function ( error ) {\n\n\t\t\tconsole.error( 'THREE.GLTFLoader: Couldn\\'t load texture', sourceURI );\n\t\t\tthrow error;\n\n\t\t} );\n\n\t\tthis.sourceCache[ sourceIndex ] = promise;\n\t\treturn promise;\n\n\t}\n\n\t/**\n\t * Asynchronously assigns a texture to the given material parameters.\n\t *\n\t * @private\n\t * @param {Object} materialParams\n\t * @param {string} mapName\n\t * @param {Object} mapDef\n\t * @param {string} [colorSpace]\n\t * @return {Promise<Texture>}\n\t */\n\tassignTexture( materialParams, mapName, mapDef, colorSpace ) {\n\n\t\tconst parser = this;\n\n\t\treturn this.getDependency( 'texture', mapDef.index ).then( function ( texture ) {\n\n\t\t\tif ( ! texture ) return null;\n\n\t\t\tif ( mapDef.texCoord !== undefined && mapDef.texCoord > 0 ) {\n\n\t\t\t\ttexture = texture.clone();\n\t\t\t\ttexture.channel = mapDef.texCoord;\n\n\t\t\t}\n\n\t\t\tif ( parser.extensions[ EXTENSIONS.KHR_TEXTURE_TRANSFORM ] ) {\n\n\t\t\t\tconst transform = mapDef.extensions !== undefined ? mapDef.extensions[ EXTENSIONS.KHR_TEXTURE_TRANSFORM ] : undefined;\n\n\t\t\t\tif ( transform ) {\n\n\t\t\t\t\tconst gltfReference = parser.associations.get( texture );\n\t\t\t\t\ttexture = parser.extensions[ EXTENSIONS.KHR_TEXTURE_TRANSFORM ].extendTexture( texture, transform );\n\t\t\t\t\tparser.associations.set( texture, gltfReference );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( colorSpace !== undefined ) {\n\n\t\t\t\ttexture.colorSpace = colorSpace;\n\n\t\t\t}\n\n\t\t\tmaterialParams[ mapName ] = texture;\n\n\t\t\treturn texture;\n\n\t\t} );\n\n\t}\n\n\t/**\n\t * Assigns final material to a Mesh, Line, or Points instance. The instance\n\t * already has a material (generated from the glTF material options alone)\n\t * but reuse of the same glTF material may require multiple threejs materials\n\t * to accommodate different primitive types, defines, etc. New materials will\n\t * be created if necessary, and reused from a cache.\n\t *\n\t * @private\n\t * @param {Object3D} mesh Mesh, Line, or Points instance.\n\t */\n\tassignFinalMaterial( mesh ) {\n\n\t\tconst geometry = mesh.geometry;\n\t\tlet material = mesh.material;\n\n\t\tconst useDerivativeTangents = geometry.attributes.tangent === undefined;\n\t\tconst useVertexColors = geometry.attributes.color !== undefined;\n\t\tconst useFlatShading = geometry.attributes.normal === undefined;\n\n\t\tif ( mesh.isPoints ) {\n\n\t\t\tconst cacheKey = 'PointsMaterial:' + material.uuid;\n\n\t\t\tlet pointsMaterial = this.cache.get( cacheKey );\n\n\t\t\tif ( ! pointsMaterial ) {\n\n\t\t\t\tpointsMaterial = new PointsMaterial();\n\t\t\t\tMaterial.prototype.copy.call( pointsMaterial, material );\n\t\t\t\tpointsMaterial.color.copy( material.color );\n\t\t\t\tpointsMaterial.map = material.map;\n\t\t\t\tpointsMaterial.sizeAttenuation = false; // glTF spec says points should be 1px\n\n\t\t\t\tthis.cache.add( cacheKey, pointsMaterial );\n\n\t\t\t}\n\n\t\t\tmaterial = pointsMaterial;\n\n\t\t} else if ( mesh.isLine ) {\n\n\t\t\tconst cacheKey = 'LineBasicMaterial:' + material.uuid;\n\n\t\t\tlet lineMaterial = this.cache.get( cacheKey );\n\n\t\t\tif ( ! lineMaterial ) {\n\n\t\t\t\tlineMaterial = new LineBasicMaterial();\n\t\t\t\tMaterial.prototype.copy.call( lineMaterial, material );\n\t\t\t\tlineMaterial.color.copy( material.color );\n\t\t\t\tlineMaterial.map = material.map;\n\n\t\t\t\tthis.cache.add( cacheKey, lineMaterial );\n\n\t\t\t}\n\n\t\t\tmaterial = lineMaterial;\n\n\t\t}\n\n\t\t// Clone the material if it will be modified\n\t\tif ( useDerivativeTangents || useVertexColors || useFlatShading ) {\n\n\t\t\tlet cacheKey = 'ClonedMaterial:' + material.uuid + ':';\n\n\t\t\tif ( useDerivativeTangents ) cacheKey += 'derivative-tangents:';\n\t\t\tif ( useVertexColors ) cacheKey += 'vertex-colors:';\n\t\t\tif ( useFlatShading ) cacheKey += 'flat-shading:';\n\n\t\t\tlet cachedMaterial = this.cache.get( cacheKey );\n\n\t\t\tif ( ! cachedMaterial ) {\n\n\t\t\t\tcachedMaterial = material.clone();\n\n\t\t\t\tif ( useVertexColors ) cachedMaterial.vertexColors = true;\n\t\t\t\tif ( useFlatShading ) cachedMaterial.flatShading = true;\n\n\t\t\t\tif ( useDerivativeTangents ) {\n\n\t\t\t\t\t// https://github.com/mrdoob/three.js/issues/11438#issuecomment-507003995\n\t\t\t\t\tif ( cachedMaterial.normalScale ) cachedMaterial.normalScale.y *= - 1;\n\t\t\t\t\tif ( cachedMaterial.clearcoatNormalScale ) cachedMaterial.clearcoatNormalScale.y *= - 1;\n\n\t\t\t\t}\n\n\t\t\t\tthis.cache.add( cacheKey, cachedMaterial );\n\n\t\t\t\tthis.associations.set( cachedMaterial, this.associations.get( material ) );\n\n\t\t\t}\n\n\t\t\tmaterial = cachedMaterial;\n\n\t\t}\n\n\t\tmesh.material = material;\n\n\t}\n\n\tgetMaterialType( /* materialIndex */ ) {\n\n\t\treturn MeshStandardMaterial;\n\n\t}\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#materials\n\t *\n\t * @private\n\t * @param {number} materialIndex\n\t * @return {Promise<Material>}\n\t */\n\tloadMaterial( materialIndex ) {\n\n\t\tconst parser = this;\n\t\tconst json = this.json;\n\t\tconst extensions = this.extensions;\n\t\tconst materialDef = json.materials[ materialIndex ];\n\n\t\tlet materialType;\n\t\tconst materialParams = {};\n\t\tconst materialExtensions = materialDef.extensions || {};\n\n\t\tconst pending = [];\n\n\t\tif ( materialExtensions[ EXTENSIONS.KHR_MATERIALS_UNLIT ] ) {\n\n\t\t\tconst kmuExtension = extensions[ EXTENSIONS.KHR_MATERIALS_UNLIT ];\n\t\t\tmaterialType = kmuExtension.getMaterialType();\n\t\t\tpending.push( kmuExtension.extendParams( materialParams, materialDef, parser ) );\n\n\t\t} else {\n\n\t\t\t// Specification:\n\t\t\t// https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#metallic-roughness-material\n\n\t\t\tconst metallicRoughness = materialDef.pbrMetallicRoughness || {};\n\n\t\t\tmaterialParams.color = new Color( 1.0, 1.0, 1.0 );\n\t\t\tmaterialParams.opacity = 1.0;\n\n\t\t\tif ( Array.isArray( metallicRoughness.baseColorFactor ) ) {\n\n\t\t\t\tconst array = metallicRoughness.baseColorFactor;\n\n\t\t\t\tmaterialParams.color.setRGB( array[ 0 ], array[ 1 ], array[ 2 ], LinearSRGBColorSpace );\n\t\t\t\tmaterialParams.opacity = array[ 3 ];\n\n\t\t\t}\n\n\t\t\tif ( metallicRoughness.baseColorTexture !== undefined ) {\n\n\t\t\t\tpending.push( parser.assignTexture( materialParams, 'map', metallicRoughness.baseColorTexture, SRGBColorSpace ) );\n\n\t\t\t}\n\n\t\t\tmaterialParams.metalness = metallicRoughness.metallicFactor !== undefined ? metallicRoughness.metallicFactor : 1.0;\n\t\t\tmaterialParams.roughness = metallicRoughness.roughnessFactor !== undefined ? metallicRoughness.roughnessFactor : 1.0;\n\n\t\t\tif ( metallicRoughness.metallicRoughnessTexture !== undefined ) {\n\n\t\t\t\tpending.push( parser.assignTexture( materialParams, 'metalnessMap', metallicRoughness.metallicRoughnessTexture ) );\n\t\t\t\tpending.push( parser.assignTexture( materialParams, 'roughnessMap', metallicRoughness.metallicRoughnessTexture ) );\n\n\t\t\t}\n\n\t\t\tmaterialType = this._invokeOne( function ( ext ) {\n\n\t\t\t\treturn ext.getMaterialType && ext.getMaterialType( materialIndex );\n\n\t\t\t} );\n\n\t\t\tpending.push( Promise.all( this._invokeAll( function ( ext ) {\n\n\t\t\t\treturn ext.extendMaterialParams && ext.extendMaterialParams( materialIndex, materialParams );\n\n\t\t\t} ) ) );\n\n\t\t}\n\n\t\tif ( materialDef.doubleSided === true ) {\n\n\t\t\tmaterialParams.side = DoubleSide;\n\n\t\t}\n\n\t\tconst alphaMode = materialDef.alphaMode || ALPHA_MODES.OPAQUE;\n\n\t\tif ( alphaMode === ALPHA_MODES.BLEND ) {\n\n\t\t\tmaterialParams.transparent = true;\n\n\t\t\t// See: https://github.com/mrdoob/three.js/issues/17706\n\t\t\tmaterialParams.depthWrite = false;\n\n\t\t} else {\n\n\t\t\tmaterialParams.transparent = false;\n\n\t\t\tif ( alphaMode === ALPHA_MODES.MASK ) {\n\n\t\t\t\tmaterialParams.alphaTest = materialDef.alphaCutoff !== undefined ? materialDef.alphaCutoff : 0.5;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( materialDef.normalTexture !== undefined && materialType !== MeshBasicMaterial ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'normalMap', materialDef.normalTexture ) );\n\n\t\t\tmaterialParams.normalScale = new Vector2( 1, 1 );\n\n\t\t\tif ( materialDef.normalTexture.scale !== undefined ) {\n\n\t\t\t\tconst scale = materialDef.normalTexture.scale;\n\n\t\t\t\tmaterialParams.normalScale.set( scale, scale );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( materialDef.occlusionTexture !== undefined && materialType !== MeshBasicMaterial ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'aoMap', materialDef.occlusionTexture ) );\n\n\t\t\tif ( materialDef.occlusionTexture.strength !== undefined ) {\n\n\t\t\t\tmaterialParams.aoMapIntensity = materialDef.occlusionTexture.strength;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( materialDef.emissiveFactor !== undefined && materialType !== MeshBasicMaterial ) {\n\n\t\t\tconst emissiveFactor = materialDef.emissiveFactor;\n\t\t\tmaterialParams.emissive = new Color().setRGB( emissiveFactor[ 0 ], emissiveFactor[ 1 ], emissiveFactor[ 2 ], LinearSRGBColorSpace );\n\n\t\t}\n\n\t\tif ( materialDef.emissiveTexture !== undefined && materialType !== MeshBasicMaterial ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'emissiveMap', materialDef.emissiveTexture, SRGBColorSpace ) );\n\n\t\t}\n\n\t\treturn Promise.all( pending ).then( function () {\n\n\t\t\tconst material = new materialType( materialParams );\n\n\t\t\tif ( materialDef.name ) material.name = materialDef.name;\n\n\t\t\tassignExtrasToUserData( material, materialDef );\n\n\t\t\tparser.associations.set( material, { materials: materialIndex } );\n\n\t\t\tif ( materialDef.extensions ) addUnknownExtensionsToUserData( extensions, material, materialDef );\n\n\t\t\treturn material;\n\n\t\t} );\n\n\t}\n\n\t/**\n\t * When Object3D instances are targeted by animation, they need unique names.\n\t *\n\t * @private\n\t * @param {string} originalName\n\t * @return {string}\n\t */\n\tcreateUniqueName( originalName ) {\n\n\t\tconst sanitizedName = PropertyBinding.sanitizeNodeName( originalName || '' );\n\n\t\tif ( sanitizedName in this.nodeNamesUsed ) {\n\n\t\t\treturn sanitizedName + '_' + ( ++ this.nodeNamesUsed[ sanitizedName ] );\n\n\t\t} else {\n\n\t\t\tthis.nodeNamesUsed[ sanitizedName ] = 0;\n\n\t\t\treturn sanitizedName;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#geometry\n\t *\n\t * Creates BufferGeometries from primitives.\n\t *\n\t * @private\n\t * @param {Array<GLTF.Primitive>} primitives\n\t * @return {Promise<Array<BufferGeometry>>}\n\t */\n\tloadGeometries( primitives ) {\n\n\t\tconst parser = this;\n\t\tconst extensions = this.extensions;\n\t\tconst cache = this.primitiveCache;\n\n\t\tfunction createDracoPrimitive( primitive ) {\n\n\t\t\treturn extensions[ EXTENSIONS.KHR_DRACO_MESH_COMPRESSION ]\n\t\t\t\t.decodePrimitive( primitive, parser )\n\t\t\t\t.then( function ( geometry ) {\n\n\t\t\t\t\treturn addPrimitiveAttributes( geometry, primitive, parser );\n\n\t\t\t\t} );\n\n\t\t}\n\n\t\tconst pending = [];\n\n\t\tfor ( let i = 0, il = primitives.length; i < il; i ++ ) {\n\n\t\t\tconst primitive = primitives[ i ];\n\t\t\tconst cacheKey = createPrimitiveKey( primitive );\n\n\t\t\t// See if we've already created this geometry\n\t\t\tconst cached = cache[ cacheKey ];\n\n\t\t\tif ( cached ) {\n\n\t\t\t\t// Use the cached geometry if it exists\n\t\t\t\tpending.push( cached.promise );\n\n\t\t\t} else {\n\n\t\t\t\tlet geometryPromise;\n\n\t\t\t\tif ( primitive.extensions && primitive.extensions[ EXTENSIONS.KHR_DRACO_MESH_COMPRESSION ] ) {\n\n\t\t\t\t\t// Use DRACO geometry if available\n\t\t\t\t\tgeometryPromise = createDracoPrimitive( primitive );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// Otherwise create a new geometry\n\t\t\t\t\tgeometryPromise = addPrimitiveAttributes( new BufferGeometry(), primitive, parser );\n\n\t\t\t\t}\n\n\t\t\t\t// Cache this geometry\n\t\t\t\tcache[ cacheKey ] = { primitive: primitive, promise: geometryPromise };\n\n\t\t\t\tpending.push( geometryPromise );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn Promise.all( pending );\n\n\t}\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#meshes\n\t *\n\t * @private\n\t * @param {number} meshIndex\n\t * @return {Promise<Group|Mesh|SkinnedMesh|Line|Points>}\n\t */\n\tloadMesh( meshIndex ) {\n\n\t\tconst parser = this;\n\t\tconst json = this.json;\n\t\tconst extensions = this.extensions;\n\n\t\tconst meshDef = json.meshes[ meshIndex ];\n\t\tconst primitives = meshDef.primitives;\n\n\t\tconst pending = [];\n\n\t\tfor ( let i = 0, il = primitives.length; i < il; i ++ ) {\n\n\t\t\tconst material = primitives[ i ].material === undefined\n\t\t\t\t? createDefaultMaterial( this.cache )\n\t\t\t\t: this.getDependency( 'material', primitives[ i ].material );\n\n\t\t\tpending.push( material );\n\n\t\t}\n\n\t\tpending.push( parser.loadGeometries( primitives ) );\n\n\t\treturn Promise.all( pending ).then( function ( results ) {\n\n\t\t\tconst materials = results.slice( 0, results.length - 1 );\n\t\t\tconst geometries = results[ results.length - 1 ];\n\n\t\t\tconst meshes = [];\n\n\t\t\tfor ( let i = 0, il = geometries.length; i < il; i ++ ) {\n\n\t\t\t\tconst geometry = geometries[ i ];\n\t\t\t\tconst primitive = primitives[ i ];\n\n\t\t\t\t// 1. create Mesh\n\n\t\t\t\tlet mesh;\n\n\t\t\t\tconst material = materials[ i ];\n\n\t\t\t\tif ( primitive.mode === WEBGL_CONSTANTS.TRIANGLES ||\n\t\t\t\t\t\tprimitive.mode === WEBGL_CONSTANTS.TRIANGLE_STRIP ||\n\t\t\t\t\t\tprimitive.mode === WEBGL_CONSTANTS.TRIANGLE_FAN ||\n\t\t\t\t\t\tprimitive.mode === undefined ) {\n\n\t\t\t\t\t// .isSkinnedMesh isn't in glTF spec. See ._markDefs()\n\t\t\t\t\tmesh = meshDef.isSkinnedMesh === true\n\t\t\t\t\t\t? new SkinnedMesh( geometry, material )\n\t\t\t\t\t\t: new Mesh( geometry, material );\n\n\t\t\t\t\tif ( mesh.isSkinnedMesh === true ) {\n\n\t\t\t\t\t\t// normalize skin weights to fix malformed assets (see #15319)\n\t\t\t\t\t\tmesh.normalizeSkinWeights();\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( primitive.mode === WEBGL_CONSTANTS.TRIANGLE_STRIP ) {\n\n\t\t\t\t\t\tmesh.geometry = toTrianglesDrawMode( mesh.geometry, TriangleStripDrawMode );\n\n\t\t\t\t\t} else if ( primitive.mode === WEBGL_CONSTANTS.TRIANGLE_FAN ) {\n\n\t\t\t\t\t\tmesh.geometry = toTrianglesDrawMode( mesh.geometry, TriangleFanDrawMode );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( primitive.mode === WEBGL_CONSTANTS.LINES ) {\n\n\t\t\t\t\tmesh = new LineSegments( geometry, material );\n\n\t\t\t\t} else if ( primitive.mode === WEBGL_CONSTANTS.LINE_STRIP ) {\n\n\t\t\t\t\tmesh = new Line( geometry, material );\n\n\t\t\t\t} else if ( primitive.mode === WEBGL_CONSTANTS.LINE_LOOP ) {\n\n\t\t\t\t\tmesh = new LineLoop( geometry, material );\n\n\t\t\t\t} else if ( primitive.mode === WEBGL_CONSTANTS.POINTS ) {\n\n\t\t\t\t\tmesh = new Points( geometry, material );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow new Error( 'THREE.GLTFLoader: Primitive mode unsupported: ' + primitive.mode );\n\n\t\t\t\t}\n\n\t\t\t\tif ( Object.keys( mesh.geometry.morphAttributes ).length > 0 ) {\n\n\t\t\t\t\tupdateMorphTargets( mesh, meshDef );\n\n\t\t\t\t}\n\n\t\t\t\tmesh.name = parser.createUniqueName( meshDef.name || ( 'mesh_' + meshIndex ) );\n\n\t\t\t\tassignExtrasToUserData( mesh, meshDef );\n\n\t\t\t\tif ( primitive.extensions ) addUnknownExtensionsToUserData( extensions, mesh, primitive );\n\n\t\t\t\tparser.assignFinalMaterial( mesh );\n\n\t\t\t\tmeshes.push( mesh );\n\n\t\t\t}\n\n\t\t\tfor ( let i = 0, il = meshes.length; i < il; i ++ ) {\n\n\t\t\t\tparser.associations.set( meshes[ i ], {\n\t\t\t\t\tmeshes: meshIndex,\n\t\t\t\t\tprimitives: i\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tif ( meshes.length === 1 ) {\n\n\t\t\t\tif ( meshDef.extensions ) addUnknownExtensionsToUserData( extensions, meshes[ 0 ], meshDef );\n\n\t\t\t\treturn meshes[ 0 ];\n\n\t\t\t}\n\n\t\t\tconst group = new Group();\n\n\t\t\tif ( meshDef.extensions ) addUnknownExtensionsToUserData( extensions, group, meshDef );\n\n\t\t\tparser.associations.set( group, { meshes: meshIndex } );\n\n\t\t\tfor ( let i = 0, il = meshes.length; i < il; i ++ ) {\n\n\t\t\t\tgroup.add( meshes[ i ] );\n\n\t\t\t}\n\n\t\t\treturn group;\n\n\t\t} );\n\n\t}\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#cameras\n\t *\n\t * @private\n\t * @param {number} cameraIndex\n\t * @return {Promise<THREE.Camera>}\n\t */\n\tloadCamera( cameraIndex ) {\n\n\t\tlet camera;\n\t\tconst cameraDef = this.json.cameras[ cameraIndex ];\n\t\tconst params = cameraDef[ cameraDef.type ];\n\n\t\tif ( ! params ) {\n\n\t\t\tconsole.warn( 'THREE.GLTFLoader: Missing camera parameters.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( cameraDef.type === 'perspective' ) {\n\n\t\t\tcamera = new PerspectiveCamera( MathUtils.radToDeg( params.yfov ), params.aspectRatio || 1, params.znear || 1, params.zfar || 2e6 );\n\n\t\t} else if ( cameraDef.type === 'orthographic' ) {\n\n\t\t\tcamera = new OrthographicCamera( - params.xmag, params.xmag, params.ymag, - params.ymag, params.znear, params.zfar );\n\n\t\t}\n\n\t\tif ( cameraDef.name ) camera.name = this.createUniqueName( cameraDef.name );\n\n\t\tassignExtrasToUserData( camera, cameraDef );\n\n\t\treturn Promise.resolve( camera );\n\n\t}\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#skins\n\t *\n\t * @private\n\t * @param {number} skinIndex\n\t * @return {Promise<Skeleton>}\n\t */\n\tloadSkin( skinIndex ) {\n\n\t\tconst skinDef = this.json.skins[ skinIndex ];\n\n\t\tconst pending = [];\n\n\t\tfor ( let i = 0, il = skinDef.joints.length; i < il; i ++ ) {\n\n\t\t\tpending.push( this._loadNodeShallow( skinDef.joints[ i ] ) );\n\n\t\t}\n\n\t\tif ( skinDef.inverseBindMatrices !== undefined ) {\n\n\t\t\tpending.push( this.getDependency( 'accessor', skinDef.inverseBindMatrices ) );\n\n\t\t} else {\n\n\t\t\tpending.push( null );\n\n\t\t}\n\n\t\treturn Promise.all( pending ).then( function ( results ) {\n\n\t\t\tconst inverseBindMatrices = results.pop();\n\t\t\tconst jointNodes = results;\n\n\t\t\t// Note that bones (joint nodes) may or may not be in the\n\t\t\t// scene graph at this time.\n\n\t\t\tconst bones = [];\n\t\t\tconst boneInverses = [];\n\n\t\t\tfor ( let i = 0, il = jointNodes.length; i < il; i ++ ) {\n\n\t\t\t\tconst jointNode = jointNodes[ i ];\n\n\t\t\t\tif ( jointNode ) {\n\n\t\t\t\t\tbones.push( jointNode );\n\n\t\t\t\t\tconst mat = new Matrix4();\n\n\t\t\t\t\tif ( inverseBindMatrices !== null ) {\n\n\t\t\t\t\t\tmat.fromArray( inverseBindMatrices.array, i * 16 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tboneInverses.push( mat );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.GLTFLoader: Joint \"%s\" could not be found.', skinDef.joints[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn new Skeleton( bones, boneInverses );\n\n\t\t} );\n\n\t}\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#animations\n\t *\n\t * @private\n\t * @param {number} animationIndex\n\t * @return {Promise<AnimationClip>}\n\t */\n\tloadAnimation( animationIndex ) {\n\n\t\tconst json = this.json;\n\t\tconst parser = this;\n\n\t\tconst animationDef = json.animations[ animationIndex ];\n\t\tconst animationName = animationDef.name ? animationDef.name : 'animation_' + animationIndex;\n\n\t\tconst pendingNodes = [];\n\t\tconst pendingInputAccessors = [];\n\t\tconst pendingOutputAccessors = [];\n\t\tconst pendingSamplers = [];\n\t\tconst pendingTargets = [];\n\n\t\tfor ( let i = 0, il = animationDef.channels.length; i < il; i ++ ) {\n\n\t\t\tconst channel = animationDef.channels[ i ];\n\t\t\tconst sampler = animationDef.samplers[ channel.sampler ];\n\t\t\tconst target = channel.target;\n\t\t\tconst name = target.node;\n\t\t\tconst input = animationDef.parameters !== undefined ? animationDef.parameters[ sampler.input ] : sampler.input;\n\t\t\tconst output = animationDef.parameters !== undefined ? animationDef.parameters[ sampler.output ] : sampler.output;\n\n\t\t\tif ( target.node === undefined ) continue;\n\n\t\t\tpendingNodes.push( this.getDependency( 'node', name ) );\n\t\t\tpendingInputAccessors.push( this.getDependency( 'accessor', input ) );\n\t\t\tpendingOutputAccessors.push( this.getDependency( 'accessor', output ) );\n\t\t\tpendingSamplers.push( sampler );\n\t\t\tpendingTargets.push( target );\n\n\t\t}\n\n\t\treturn Promise.all( [\n\n\t\t\tPromise.all( pendingNodes ),\n\t\t\tPromise.all( pendingInputAccessors ),\n\t\t\tPromise.all( pendingOutputAccessors ),\n\t\t\tPromise.all( pendingSamplers ),\n\t\t\tPromise.all( pendingTargets )\n\n\t\t] ).then( function ( dependencies ) {\n\n\t\t\tconst nodes = dependencies[ 0 ];\n\t\t\tconst inputAccessors = dependencies[ 1 ];\n\t\t\tconst outputAccessors = dependencies[ 2 ];\n\t\t\tconst samplers = dependencies[ 3 ];\n\t\t\tconst targets = dependencies[ 4 ];\n\n\t\t\tconst tracks = [];\n\n\t\t\tfor ( let i = 0, il = nodes.length; i < il; i ++ ) {\n\n\t\t\t\tconst node = nodes[ i ];\n\t\t\t\tconst inputAccessor = inputAccessors[ i ];\n\t\t\t\tconst outputAccessor = outputAccessors[ i ];\n\t\t\t\tconst sampler = samplers[ i ];\n\t\t\t\tconst target = targets[ i ];\n\n\t\t\t\tif ( node === undefined ) continue;\n\n\t\t\t\tif ( node.updateMatrix ) {\n\n\t\t\t\t\tnode.updateMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tconst createdTracks = parser._createAnimationTracks( node, inputAccessor, outputAccessor, sampler, target );\n\n\t\t\t\tif ( createdTracks ) {\n\n\t\t\t\t\tfor ( let k = 0; k < createdTracks.length; k ++ ) {\n\n\t\t\t\t\t\ttracks.push( createdTracks[ k ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn new AnimationClip( animationName, undefined, tracks );\n\n\t\t} );\n\n\t}\n\n\tcreateNodeMesh( nodeIndex ) {\n\n\t\tconst json = this.json;\n\t\tconst parser = this;\n\t\tconst nodeDef = json.nodes[ nodeIndex ];\n\n\t\tif ( nodeDef.mesh === undefined ) return null;\n\n\t\treturn parser.getDependency( 'mesh', nodeDef.mesh ).then( function ( mesh ) {\n\n\t\t\tconst node = parser._getNodeRef( parser.meshCache, nodeDef.mesh, mesh );\n\n\t\t\t// if weights are provided on the node, override weights on the mesh.\n\t\t\tif ( nodeDef.weights !== undefined ) {\n\n\t\t\t\tnode.traverse( function ( o ) {\n\n\t\t\t\t\tif ( ! o.isMesh ) return;\n\n\t\t\t\t\tfor ( let i = 0, il = nodeDef.weights.length; i < il; i ++ ) {\n\n\t\t\t\t\t\to.morphTargetInfluences[ i ] = nodeDef.weights[ i ];\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\treturn node;\n\n\t\t} );\n\n\t}\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#nodes-and-hierarchy\n\t *\n\t * @private\n\t * @param {number} nodeIndex\n\t * @return {Promise<Object3D>}\n\t */\n\tloadNode( nodeIndex ) {\n\n\t\tconst json = this.json;\n\t\tconst parser = this;\n\n\t\tconst nodeDef = json.nodes[ nodeIndex ];\n\n\t\tconst nodePending = parser._loadNodeShallow( nodeIndex );\n\n\t\tconst childPending = [];\n\t\tconst childrenDef = nodeDef.children || [];\n\n\t\tfor ( let i = 0, il = childrenDef.length; i < il; i ++ ) {\n\n\t\t\tchildPending.push( parser.getDependency( 'node', childrenDef[ i ] ) );\n\n\t\t}\n\n\t\tconst skeletonPending = nodeDef.skin === undefined\n\t\t\t? Promise.resolve( null )\n\t\t\t: parser.getDependency( 'skin', nodeDef.skin );\n\n\t\treturn Promise.all( [\n\t\t\tnodePending,\n\t\t\tPromise.all( childPending ),\n\t\t\tskeletonPending\n\t\t] ).then( function ( results ) {\n\n\t\t\tconst node = results[ 0 ];\n\t\t\tconst children = results[ 1 ];\n\t\t\tconst skeleton = results[ 2 ];\n\n\t\t\tif ( skeleton !== null ) {\n\n\t\t\t\t// This full traverse should be fine because\n\t\t\t\t// child glTF nodes have not been added to this node yet.\n\t\t\t\tnode.traverse( function ( mesh ) {\n\n\t\t\t\t\tif ( ! mesh.isSkinnedMesh ) return;\n\n\t\t\t\t\tmesh.bind( skeleton, _identityMatrix );\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tfor ( let i = 0, il = children.length; i < il; i ++ ) {\n\n\t\t\t\tnode.add( children[ i ] );\n\n\t\t\t}\n\n\t\t\treturn node;\n\n\t\t} );\n\n\t}\n\n\t// ._loadNodeShallow() parses a single node.\n\t// skin and child nodes are created and added in .loadNode() (no '_' prefix).\n\t_loadNodeShallow( nodeIndex ) {\n\n\t\tconst json = this.json;\n\t\tconst extensions = this.extensions;\n\t\tconst parser = this;\n\n\t\t// This method is called from .loadNode() and .loadSkin().\n\t\t// Cache a node to avoid duplication.\n\n\t\tif ( this.nodeCache[ nodeIndex ] !== undefined ) {\n\n\t\t\treturn this.nodeCache[ nodeIndex ];\n\n\t\t}\n\n\t\tconst nodeDef = json.nodes[ nodeIndex ];\n\n\t\t// reserve node's name before its dependencies, so the root has the intended name.\n\t\tconst nodeName = nodeDef.name ? parser.createUniqueName( nodeDef.name ) : '';\n\n\t\tconst pending = [];\n\n\t\tconst meshPromise = parser._invokeOne( function ( ext ) {\n\n\t\t\treturn ext.createNodeMesh && ext.createNodeMesh( nodeIndex );\n\n\t\t} );\n\n\t\tif ( meshPromise ) {\n\n\t\t\tpending.push( meshPromise );\n\n\t\t}\n\n\t\tif ( nodeDef.camera !== undefined ) {\n\n\t\t\tpending.push( parser.getDependency( 'camera', nodeDef.camera ).then( function ( camera ) {\n\n\t\t\t\treturn parser._getNodeRef( parser.cameraCache, nodeDef.camera, camera );\n\n\t\t\t} ) );\n\n\t\t}\n\n\t\tparser._invokeAll( function ( ext ) {\n\n\t\t\treturn ext.createNodeAttachment && ext.createNodeAttachment( nodeIndex );\n\n\t\t} ).forEach( function ( promise ) {\n\n\t\t\tpending.push( promise );\n\n\t\t} );\n\n\t\tthis.nodeCache[ nodeIndex ] = Promise.all( pending ).then( function ( objects ) {\n\n\t\t\tlet node;\n\n\t\t\t// .isBone isn't in glTF spec. See ._markDefs\n\t\t\tif ( nodeDef.isBone === true ) {\n\n\t\t\t\tnode = new Bone();\n\n\t\t\t} else if ( objects.length > 1 ) {\n\n\t\t\t\tnode = new Group();\n\n\t\t\t} else if ( objects.length === 1 ) {\n\n\t\t\t\tnode = objects[ 0 ];\n\n\t\t\t} else {\n\n\t\t\t\tnode = new Object3D();\n\n\t\t\t}\n\n\t\t\tif ( node !== objects[ 0 ] ) {\n\n\t\t\t\tfor ( let i = 0, il = objects.length; i < il; i ++ ) {\n\n\t\t\t\t\tnode.add( objects[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( nodeDef.name ) {\n\n\t\t\t\tnode.userData.name = nodeDef.name;\n\t\t\t\tnode.name = nodeName;\n\n\t\t\t}\n\n\t\t\tassignExtrasToUserData( node, nodeDef );\n\n\t\t\tif ( nodeDef.extensions ) addUnknownExtensionsToUserData( extensions, node, nodeDef );\n\n\t\t\tif ( nodeDef.matrix !== undefined ) {\n\n\t\t\t\tconst matrix = new Matrix4();\n\t\t\t\tmatrix.fromArray( nodeDef.matrix );\n\t\t\t\tnode.applyMatrix4( matrix );\n\n\t\t\t} else {\n\n\t\t\t\tif ( nodeDef.translation !== undefined ) {\n\n\t\t\t\t\tnode.position.fromArray( nodeDef.translation );\n\n\t\t\t\t}\n\n\t\t\t\tif ( nodeDef.rotation !== undefined ) {\n\n\t\t\t\t\tnode.quaternion.fromArray( nodeDef.rotation );\n\n\t\t\t\t}\n\n\t\t\t\tif ( nodeDef.scale !== undefined ) {\n\n\t\t\t\t\tnode.scale.fromArray( nodeDef.scale );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( ! parser.associations.has( node ) ) {\n\n\t\t\t\tparser.associations.set( node, {} );\n\n\t\t\t} else if ( nodeDef.mesh !== undefined && parser.meshCache.refs[ nodeDef.mesh ] > 1 ) {\n\n\t\t\t\tconst mapping = parser.associations.get( node );\n\t\t\t\tparser.associations.set( node, { ...mapping } );\n\n\t\t\t}\n\n\t\t\tparser.associations.get( node ).nodes = nodeIndex;\n\n\t\t\treturn node;\n\n\t\t} );\n\n\t\treturn this.nodeCache[ nodeIndex ];\n\n\t}\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#scenes\n\t *\n\t * @private\n\t * @param {number} sceneIndex\n\t * @return {Promise<Group>}\n\t */\n\tloadScene( sceneIndex ) {\n\n\t\tconst extensions = this.extensions;\n\t\tconst sceneDef = this.json.scenes[ sceneIndex ];\n\t\tconst parser = this;\n\n\t\t// Loader returns Group, not Scene.\n\t\t// See: https://github.com/mrdoob/three.js/issues/18342#issuecomment-578981172\n\t\tconst scene = new Group();\n\t\tif ( sceneDef.name ) scene.name = parser.createUniqueName( sceneDef.name );\n\n\t\tassignExtrasToUserData( scene, sceneDef );\n\n\t\tif ( sceneDef.extensions ) addUnknownExtensionsToUserData( extensions, scene, sceneDef );\n\n\t\tconst nodeIds = sceneDef.nodes || [];\n\n\t\tconst pending = [];\n\n\t\tfor ( let i = 0, il = nodeIds.length; i < il; i ++ ) {\n\n\t\t\tpending.push( parser.getDependency( 'node', nodeIds[ i ] ) );\n\n\t\t}\n\n\t\treturn Promise.all( pending ).then( function ( nodes ) {\n\n\t\t\tfor ( let i = 0, il = nodes.length; i < il; i ++ ) {\n\n\t\t\t\tscene.add( nodes[ i ] );\n\n\t\t\t}\n\n\t\t\t// Removes dangling associations, associations that reference a node that\n\t\t\t// didn't make it into the scene.\n\t\t\tconst reduceAssociations = ( node ) => {\n\n\t\t\t\tconst reducedAssociations = new Map();\n\n\t\t\t\tfor ( const [ key, value ] of parser.associations ) {\n\n\t\t\t\t\tif ( key instanceof Material || key instanceof Texture ) {\n\n\t\t\t\t\t\treducedAssociations.set( key, value );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tnode.traverse( ( node ) => {\n\n\t\t\t\t\tconst mappings = parser.associations.get( node );\n\n\t\t\t\t\tif ( mappings != null ) {\n\n\t\t\t\t\t\treducedAssociations.set( node, mappings );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\treturn reducedAssociations;\n\n\t\t\t};\n\n\t\t\tparser.associations = reduceAssociations( scene );\n\n\t\t\treturn scene;\n\n\t\t} );\n\n\t}\n\n\t_createAnimationTracks( node, inputAccessor, outputAccessor, sampler, target ) {\n\n\t\tconst tracks = [];\n\n\t\tconst targetName = node.name ? node.name : node.uuid;\n\t\tconst targetNames = [];\n\n\t\tif ( PATH_PROPERTIES[ target.path ] === PATH_PROPERTIES.weights ) {\n\n\t\t\tnode.traverse( function ( object ) {\n\n\t\t\t\tif ( object.morphTargetInfluences ) {\n\n\t\t\t\t\ttargetNames.push( object.name ? object.name : object.uuid );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t} else {\n\n\t\t\ttargetNames.push( targetName );\n\n\t\t}\n\n\t\tlet TypedKeyframeTrack;\n\n\t\tswitch ( PATH_PROPERTIES[ target.path ] ) {\n\n\t\t\tcase PATH_PROPERTIES.weights:\n\n\t\t\t\tTypedKeyframeTrack = NumberKeyframeTrack;\n\t\t\t\tbreak;\n\n\t\t\tcase PATH_PROPERTIES.rotation:\n\n\t\t\t\tTypedKeyframeTrack = QuaternionKeyframeTrack;\n\t\t\t\tbreak;\n\n\t\t\tcase PATH_PROPERTIES.translation:\n\t\t\tcase PATH_PROPERTIES.scale:\n\n\t\t\t\tTypedKeyframeTrack = VectorKeyframeTrack;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tswitch ( outputAccessor.itemSize ) {\n\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tTypedKeyframeTrack = NumberKeyframeTrack;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\tcase 3:\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tTypedKeyframeTrack = VectorKeyframeTrack;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tconst interpolation = sampler.interpolation !== undefined ? INTERPOLATION[ sampler.interpolation ] : InterpolateLinear;\n\n\n\t\tconst outputArray = this._getArrayFromAccessor( outputAccessor );\n\n\t\tfor ( let j = 0, jl = targetNames.length; j < jl; j ++ ) {\n\n\t\t\tconst track = new TypedKeyframeTrack(\n\t\t\t\ttargetNames[ j ] + '.' + PATH_PROPERTIES[ target.path ],\n\t\t\t\tinputAccessor.array,\n\t\t\t\toutputArray,\n\t\t\t\tinterpolation\n\t\t\t);\n\n\t\t\t// Override interpolation with custom factory method.\n\t\t\tif ( sampler.interpolation === 'CUBICSPLINE' ) {\n\n\t\t\t\tthis._createCubicSplineTrackInterpolant( track );\n\n\t\t\t}\n\n\t\t\ttracks.push( track );\n\n\t\t}\n\n\t\treturn tracks;\n\n\t}\n\n\t_getArrayFromAccessor( accessor ) {\n\n\t\tlet outputArray = accessor.array;\n\n\t\tif ( accessor.normalized ) {\n\n\t\t\tconst scale = getNormalizedComponentScale( outputArray.constructor );\n\t\t\tconst scaled = new Float32Array( outputArray.length );\n\n\t\t\tfor ( let j = 0, jl = outputArray.length; j < jl; j ++ ) {\n\n\t\t\t\tscaled[ j ] = outputArray[ j ] * scale;\n\n\t\t\t}\n\n\t\t\toutputArray = scaled;\n\n\t\t}\n\n\t\treturn outputArray;\n\n\t}\n\n\t_createCubicSplineTrackInterpolant( track ) {\n\n\t\ttrack.createInterpolant = function InterpolantFactoryMethodGLTFCubicSpline( result ) {\n\n\t\t\t// A CUBICSPLINE keyframe in glTF has three output values for each input value,\n\t\t\t// representing inTangent, splineVertex, and outTangent. As a result, track.getValueSize()\n\t\t\t// must be divided by three to get the interpolant's sampleSize argument.\n\n\t\t\tconst interpolantType = ( this instanceof QuaternionKeyframeTrack ) ? GLTFCubicSplineQuaternionInterpolant : GLTFCubicSplineInterpolant;\n\n\t\t\treturn new interpolantType( this.times, this.values, this.getValueSize() / 3, result );\n\n\t\t};\n\n\t\t// Mark as CUBICSPLINE. `track.getInterpolation()` doesn't support custom interpolants.\n\t\ttrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline = true;\n\n\t}\n\n}\n\n/**\n *\n * @private\n * @param {BufferGeometry} geometry\n * @param {GLTF.Primitive} primitiveDef\n * @param {GLTFParser} parser\n */\nfunction computeBounds( geometry, primitiveDef, parser ) {\n\n\tconst attributes = primitiveDef.attributes;\n\n\tconst box = new Box3();\n\n\tif ( attributes.POSITION !== undefined ) {\n\n\t\tconst accessor = parser.json.accessors[ attributes.POSITION ];\n\n\t\tconst min = accessor.min;\n\t\tconst max = accessor.max;\n\n\t\t// glTF requires 'min' and 'max', but VRM (which extends glTF) currently ignores that requirement.\n\n\t\tif ( min !== undefined && max !== undefined ) {\n\n\t\t\tbox.set(\n\t\t\t\tnew Vector3( min[ 0 ], min[ 1 ], min[ 2 ] ),\n\t\t\t\tnew Vector3( max[ 0 ], max[ 1 ], max[ 2 ] )\n\t\t\t);\n\n\t\t\tif ( accessor.normalized ) {\n\n\t\t\t\tconst boxScale = getNormalizedComponentScale( WEBGL_COMPONENT_TYPES[ accessor.componentType ] );\n\t\t\t\tbox.min.multiplyScalar( boxScale );\n\t\t\t\tbox.max.multiplyScalar( boxScale );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.GLTFLoader: Missing min/max properties for accessor POSITION.' );\n\n\t\t\treturn;\n\n\t\t}\n\n\t} else {\n\n\t\treturn;\n\n\t}\n\n\tconst targets = primitiveDef.targets;\n\n\tif ( targets !== undefined ) {\n\n\t\tconst maxDisplacement = new Vector3();\n\t\tconst vector = new Vector3();\n\n\t\tfor ( let i = 0, il = targets.length; i < il; i ++ ) {\n\n\t\t\tconst target = targets[ i ];\n\n\t\t\tif ( target.POSITION !== undefined ) {\n\n\t\t\t\tconst accessor = parser.json.accessors[ target.POSITION ];\n\t\t\t\tconst min = accessor.min;\n\t\t\t\tconst max = accessor.max;\n\n\t\t\t\t// glTF requires 'min' and 'max', but VRM (which extends glTF) currently ignores that requirement.\n\n\t\t\t\tif ( min !== undefined && max !== undefined ) {\n\n\t\t\t\t\t// we need to get max of absolute components because target weight is [-1,1]\n\t\t\t\t\tvector.setX( Math.max( Math.abs( min[ 0 ] ), Math.abs( max[ 0 ] ) ) );\n\t\t\t\t\tvector.setY( Math.max( Math.abs( min[ 1 ] ), Math.abs( max[ 1 ] ) ) );\n\t\t\t\t\tvector.setZ( Math.max( Math.abs( min[ 2 ] ), Math.abs( max[ 2 ] ) ) );\n\n\n\t\t\t\t\tif ( accessor.normalized ) {\n\n\t\t\t\t\t\tconst boxScale = getNormalizedComponentScale( WEBGL_COMPONENT_TYPES[ accessor.componentType ] );\n\t\t\t\t\t\tvector.multiplyScalar( boxScale );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Note: this assumes that the sum of all weights is at most 1. This isn't quite correct - it's more conservative\n\t\t\t\t\t// to assume that each target can have a max weight of 1. However, for some use cases - notably, when morph targets\n\t\t\t\t\t// are used to implement key-frame animations and as such only two are active at a time - this results in very large\n\t\t\t\t\t// boxes. So for now we make a box that's sometimes a touch too small but is hopefully mostly of reasonable size.\n\t\t\t\t\tmaxDisplacement.max( vector );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.GLTFLoader: Missing min/max properties for accessor POSITION.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// As per comment above this box isn't conservative, but has a reasonable size for a very large number of morph targets.\n\t\tbox.expandByVector( maxDisplacement );\n\n\t}\n\n\tgeometry.boundingBox = box;\n\n\tconst sphere = new Sphere();\n\n\tbox.getCenter( sphere.center );\n\tsphere.radius = box.min.distanceTo( box.max ) / 2;\n\n\tgeometry.boundingSphere = sphere;\n\n}\n\n/**\n *\n * @private\n * @param {BufferGeometry} geometry\n * @param {GLTF.Primitive} primitiveDef\n * @param {GLTFParser} parser\n * @return {Promise<BufferGeometry>}\n */\nfunction addPrimitiveAttributes( geometry, primitiveDef, parser ) {\n\n\tconst attributes = primitiveDef.attributes;\n\n\tconst pending = [];\n\n\tfunction assignAttributeAccessor( accessorIndex, attributeName ) {\n\n\t\treturn parser.getDependency( 'accessor', accessorIndex )\n\t\t\t.then( function ( accessor ) {\n\n\t\t\t\tgeometry.setAttribute( attributeName, accessor );\n\n\t\t\t} );\n\n\t}\n\n\tfor ( const gltfAttributeName in attributes ) {\n\n\t\tconst threeAttributeName = ATTRIBUTES[ gltfAttributeName ] || gltfAttributeName.toLowerCase();\n\n\t\t// Skip attributes already provided by e.g. Draco extension.\n\t\tif ( threeAttributeName in geometry.attributes ) continue;\n\n\t\tpending.push( assignAttributeAccessor( attributes[ gltfAttributeName ], threeAttributeName ) );\n\n\t}\n\n\tif ( primitiveDef.indices !== undefined && ! geometry.index ) {\n\n\t\tconst accessor = parser.getDependency( 'accessor', primitiveDef.indices ).then( function ( accessor ) {\n\n\t\t\tgeometry.setIndex( accessor );\n\n\t\t} );\n\n\t\tpending.push( accessor );\n\n\t}\n\n\tif ( ColorManagement.workingColorSpace !== LinearSRGBColorSpace && 'COLOR_0' in attributes ) {\n\n\t\tconsole.warn( `THREE.GLTFLoader: Converting vertex colors from \"srgb-linear\" to \"${ColorManagement.workingColorSpace}\" not supported.` );\n\n\t}\n\n\tassignExtrasToUserData( geometry, primitiveDef );\n\n\tcomputeBounds( geometry, primitiveDef, parser );\n\n\treturn Promise.all( pending ).then( function () {\n\n\t\treturn primitiveDef.targets !== undefined\n\t\t\t? addMorphTargets( geometry, primitiveDef.targets, parser )\n\t\t\t: geometry;\n\n\t} );\n\n}\n\n/**\n * Loader result of `GLTFLoader`.\n *\n * @typedef {Object} GLTFLoader~LoadObject\n * @property {Array<AnimationClip>} animations - An array of animation clips.\n * @property {Object} asset - Meta data about the loaded asset.\n * @property {Array<Camera>} cameras - An array of cameras.\n * @property {GLTFParser} parser - A reference to the internal parser.\n * @property {Group} scene - The default scene.\n * @property {Array<Group>} scenes - glTF assets might define multiple scenes.\n * @property {Object} userData - Additional data.\n **/\n\nexport { GLTFLoader };\n"],"names":["toTrianglesDrawMode","geometry","drawMode","console","warn","index","getIndex","indices","position","getAttribute","undefined","error","i","count","push","setIndex","numberOfTriangles","newIndices","getX","length","newGeometry","clone","clearGroups","GLTFLoader","constructor","manager","super","this","dracoLoader","ktx2Loader","meshoptDecoder","pluginCallbacks","register","parser","GLTFMaterialsClearcoatExtension","GLTFMaterialsDispersionExtension","GLTFTextureBasisUExtension","GLTFTextureWebPExtension","GLTFTextureAVIFExtension","GLTFMaterialsSheenExtension","GLTFMaterialsTransmissionExtension","GLTFMaterialsVolumeExtension","GLTFMaterialsIorExtension","GLTFMaterialsEmissiveStrengthExtension","GLTFMaterialsSpecularExtension","GLTFMaterialsIridescenceExtension","GLTFMaterialsAnisotropyExtension","GLTFMaterialsBumpExtension","GLTFLightsExtension","GLTFMeshoptCompression","GLTFMeshGpuInstancing","load","url","onLoad","onProgress","onError","scope","resourcePath","path","relativeUrl","extractUrlBase","resolveURL","itemStart","_onError","e","itemError","itemEnd","loader","setPath","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","data","parse","gltf","setDRACOLoader","setKTX2Loader","setMeshoptDecoder","callback","indexOf","unregister","splice","json","extensions","plugins","textDecoder","TextDecoder","JSON","ArrayBuffer","decode","Uint8Array","BINARY_EXTENSION_HEADER_MAGIC","EXTENSIONS","KHR_BINARY_GLTF","GLTFBinaryExtension","content","asset","version","Error","GLTFParser","crossOrigin","fileLoader","plugin","name","extensionsUsed","extensionName","extensionsRequired","KHR_MATERIALS_UNLIT","GLTFMaterialsUnlitExtension","KHR_DRACO_MESH_COMPRESSION","GLTFDracoMeshCompressionExtension","KHR_TEXTURE_TRANSFORM","GLTFTextureTransformExtension","KHR_MESH_QUANTIZATION","GLTFMeshQuantizationExtension","setExtensions","setPlugins","parseAsync","Promise","resolve","reject","GLTFRegistry","objects","get","key","add","object","remove","removeAll","KHR_LIGHTS_PUNCTUAL","KHR_MATERIALS_CLEARCOAT","KHR_MATERIALS_DISPERSION","KHR_MATERIALS_IOR","KHR_MATERIALS_SHEEN","KHR_MATERIALS_SPECULAR","KHR_MATERIALS_TRANSMISSION","KHR_MATERIALS_IRIDESCENCE","KHR_MATERIALS_ANISOTROPY","KHR_MATERIALS_VOLUME","KHR_TEXTURE_BASISU","KHR_MATERIALS_EMISSIVE_STRENGTH","EXT_MATERIALS_BUMP","EXT_TEXTURE_WEBP","EXT_TEXTURE_AVIF","EXT_MESHOPT_COMPRESSION","EXT_MESH_GPU_INSTANCING","cache","refs","uses","_markDefs","nodeDefs","nodes","nodeIndex","nodeLength","nodeDef","light","_addNodeRef","_loadLight","lightIndex","cacheKey","dependency","lightDef","lights","lightNode","color","setRGB","range","type","target","set","distance","spot","innerConeAngle","outerConeAngle","Math","PI","angle","penumbra","assignExtrasToUserData","intensity","createUniqueName","getDependency","createNodeAttachment","self","then","_getNodeRef","getMaterialType","extendParams","materialParams","materialDef","pending","opacity","metallicRoughness","pbrMetallicRoughness","Array","isArray","baseColorFactor","array","baseColorTexture","assignTexture","all","extendMaterialParams","materialIndex","materials","emissiveStrength","emissiveIntensity","extension","clearcoatFactor","clearcoat","clearcoatTexture","clearcoatRoughnessFactor","clearcoatRoughness","clearcoatRoughnessTexture","clearcoatNormalTexture","scale","clearcoatNormalScale","dispersion","iridescenceFactor","iridescence","iridescenceTexture","iridescenceIor","iridescenceIOR","iridescenceThicknessRange","iridescenceThicknessMinimum","iridescenceThicknessMaximum","iridescenceThicknessTexture","sheenColor","sheenRoughness","sheen","sheenColorFactor","colorFactor","sheenRoughnessFactor","sheenColorTexture","sheenRoughnessTexture","transmissionFactor","transmission","transmissionTexture","thickness","thicknessFactor","thicknessTexture","attenuationDistance","Infinity","colorArray","attenuationColor","ior","specularIntensity","specularFactor","specularTexture","specularColorFactor","specularColor","specularColorTexture","bumpScale","bumpFactor","bumpTexture","anisotropyStrength","anisotropy","anisotropyRotation","anisotropyTexture","loadTexture","textureIndex","textureDef","textures","options","loadTextureImage","source","images","textureLoader","uri","handler","getHandler","loadBufferView","bufferView","bufferViews","extensionDef","buffer","decoder","supported","res","byteOffset","byteLength","stride","byteStride","decodeGltfBufferAsync","mode","filter","ready","result","decodeGltfBuffer","createNodeMesh","mesh","meshDef","meshes","primitive","primitives","WEBGL_CONSTANTS","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","attributesDef","attributes","accessor","results","nodeObject","pop","isGroup","children","instancedMeshes","m","p","q","s","instancedMesh","material","TRANSLATION","fromBufferAttribute","ROTATION","SCALE","setMatrixAt","compose","attributeName","attr","instanceColor","itemSize","normalized","setAttribute","prototype","copy","call","assignFinalMaterial","clear","body","headerView","DataView","header","magic","slice","getUint32","chunkContentsLength","chunkView","chunkIndex","chunkLength","chunkType","contentArray","preload","decodePrimitive","bufferViewIndex","gltfAttributeMap","threeAttributeMap","attributeNormalizedMap","attributeTypeMap","threeAttributeName","ATTRIBUTES","toLowerCase","accessorDef","accessors","componentType","WEBGL_COMPONENT_TYPES","decodeDracoFile","attribute","extendTexture","texture","transform","texCoord","channel","offset","rotation","fromArray","repeat","needsUpdate","GLTFCubicSplineInterpolant","parameterPositions","sampleValues","sampleSize","resultBuffer","copySampleValue_","values","valueSize","interpolate_","i1","t0","t","t1","stride2","stride3","td","pp","ppp","offset1","offset0","s2","s3","s0","s1","p0","m0","p1","m1","_quaternion","GLTFCubicSplineQuaternionInterpolant","normalize","toArray","FLOAT","FLOAT_MAT3","FLOAT_MAT4","FLOAT_VEC2","FLOAT_VEC3","FLOAT_VEC4","LINEAR","REPEAT","SAMPLER_2D","POINTS","LINES","LINE_LOOP","LINE_STRIP","UNSIGNED_BYTE","UNSIGNED_SHORT","Int8Array","Int16Array","Uint16Array","Uint32Array","Float32Array","WEBGL_FILTERS","WEBGL_WRAPPINGS","WEBGL_TYPE_SIZES","POSITION","NORMAL","TANGENT","TEXCOORD_0","TEXCOORD_1","TEXCOORD_2","TEXCOORD_3","COLOR_0","WEIGHTS_0","JOINTS_0","PATH_PROPERTIES","translation","weights","INTERPOLATION","CUBICSPLINE","STEP","createDefaultMaterial","emissive","metalness","roughness","transparent","depthTest","side","addUnknownExtensionsToUserData","knownExtensions","objectDef","userData","gltfExtensions","gltfDef","extras","Object","assign","updateMorphTargets","il","morphTargetInfluences","targetNames","morphTargetDictionary","createPrimitiveKey","primitiveDef","geometryKey","dracoExtension","createAttributesKey","targets","attributesKey","keys","sort","getNormalizedComponentScale","_identityMatrix","associations","Map","primitiveCache","nodeCache","meshCache","cameraCache","lightCache","sourceCache","textureCache","nodeNamesUsed","isSafari","safariVersion","isFirefox","firefoxVersion","navigator","userAgent","test","safariMatch","match","parseInt","createImageBitmap","setCrossOrigin","_invokeAll","ext","beforeRoot","getDependencies","dependencies","scene","scenes","animations","cameras","afterRoot","updateMatrixWorld","catch","skinDefs","skins","meshDefs","skinIndex","skinLength","joints","isBone","skin","isSkinnedMesh","camera","ref","updateMappings","original","mappings","child","entries","_invokeOne","func","unshift","loadScene","loadNode","loadMesh","loadAccessor","loadBuffer","loadMaterial","loadSkin","loadAnimation","loadCamera","defs","map","def","bufferIndex","bufferDef","buffers","bufferViewDef","accessorIndex","sparse","TypedArray","pendingBufferViews","elementBytes","BYTES_PER_ELEMENT","itemBytes","bufferAttribute","ibSlice","floor","ibCacheKey","ib","itemSizeIndices","SCALAR","TypedArrayIndices","byteOffsetIndices","byteOffsetValues","sparseIndices","sparseValues","setX","setY","setZ","setW","sourceIndex","sourceDef","sampler","promise","loadImageSource","flipY","startsWith","samplers","magFilter","minFilter","wrapS","wrapT","generateMipmaps","isCompressedTexture","URL","webkitURL","sourceURI","isObjectURL","blob","Blob","mimeType","createObjectURL","isImageBitmapLoader","imageBitmap","revokeObjectURL","search","mapName","mapDef","colorSpace","gltfReference","useDerivativeTangents","tangent","useVertexColors","useFlatShading","normal","isPoints","uuid","pointsMaterial","sizeAttenuation","isLine","lineMaterial","cachedMaterial","vertexColors","flatShading","normalScale","y","materialType","kmuExtension","metallicFactor","roughnessFactor","metallicRoughnessTexture","doubleSided","alphaMode","depthWrite","alphaTest","alphaCutoff","normalTexture","occlusionTexture","strength","aoMapIntensity","emissiveFactor","emissiveTexture","originalName","sanitizedName","sanitizeNodeName","loadGeometries","createDracoPrimitive","addPrimitiveAttributes","cached","geometryPromise","meshIndex","geometries","normalizeSkinWeights","morphAttributes","group","cameraIndex","cameraDef","params","radToDeg","yfov","aspectRatio","znear","zfar","xmag","ymag","skinDef","_loadNodeShallow","inverseBindMatrices","jointNodes","bones","boneInverses","jointNode","mat","animationIndex","animationDef","animationName","pendingNodes","pendingInputAccessors","pendingOutputAccessors","pendingSamplers","pendingTargets","channels","node","input","parameters","output","inputAccessors","outputAccessors","tracks","inputAccessor","outputAccessor","updateMatrix","createdTracks","_createAnimationTracks","k","traverse","o","isMesh","nodePending","childPending","childrenDef","skeletonPending","skeleton","bind","nodeName","meshPromise","forEach","matrix","applyMatrix4","quaternion","has","mapping","sceneIndex","sceneDef","nodeIds","reducedAssociations","value","reduceAssociations","targetName","TypedKeyframeTrack","interpolation","outputArray","_getArrayFromAccessor","j","jl","track","_createCubicSplineTrackInterpolant","scaled","createInterpolant","times","getValueSize","isInterpolantFactoryMethodGLTFCubicSpline","assignAttributeAccessor","gltfAttributeName","workingColorSpace","box","min","max","boxScale","multiplyScalar","maxDisplacement","vector","abs","expandByVector","boundingBox","sphere","getCenter","center","radius","distanceTo","boundingSphere","computeBounds","hasMorphPosition","hasMorphNormal","hasMorphColor","pendingPositionAccessors","pendingNormalAccessors","pendingColorAccessors","pendingAccessor","morphPositions","morphNormals","morphColors","morphTargetsRelative","addMorphTargets"],"sourceRoot":""}